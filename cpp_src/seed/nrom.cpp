#include "seed.h"

#include <cassert>
#include <cmath>

#define C1              0.398942280401433
#define C2              0.180025191068563
#define g(x)            ( C1 * exp( -x * x / 2.0 ) - C2 * ( A - x ) )
#define BIG             134217728 /* 2^27 */

const static double A     = 2.216035867166471;
const static double a[32] = {
        0.0000000, 0.03917609, 0.07841241, 0.1177699,
        0.1573107, 0.19709910, 0.23720210, 0.2776904,
        0.3186394, 0.36012990, 0.40225010, 0.4450965,
        0.4887764, 0.53340970, 0.57913220, 0.6260990,
        0.6744898, 0.72451440, 0.77642180, 0.8305109,
        0.8871466, 0.94678180, 1.00999000, 1.0775160,
        1.1503490, 1.22985900, 1.31801100, 1.4177970,
        1.5341210, 1.67594000, 1.86273200, 2.1538750
};
const static double t[31] = {
        7.673828e-4, 0.002306870, 0.003860618, 0.005438454,
        0.007050699, 0.008708396, 0.010423570, 0.012209530,
        0.014081250, 0.016055790, 0.018152900, 0.020395730,
        0.022811770, 0.025434070, 0.028302960, 0.031468220,
        0.034992330, 0.038954830, 0.043458780, 0.048640350,
        0.054683340, 0.061842220, 0.070479830, 0.081131950,
        0.094624440, 0.112300100, 0.136498000, 0.171688600,
        0.227624100, 0.330498000, 0.584703100
};
const static double h[31] = {
        0.03920617, 0.03932705, 0.03950999, 0.03975703,
        0.04007093, 0.04045533, 0.04091481, 0.04145507,
        0.04208311, 0.04280748, 0.04363863, 0.04458932,
        0.04567523, 0.04691571, 0.04833487, 0.04996298,
        0.05183859, 0.05401138, 0.05654656, 0.05953130,
        0.06308489, 0.06737503, 0.07264544, 0.07926471,
        0.08781922, 0.09930398, 0.11555990, 0.14043440,
        0.18361420, 0.27900160, 0.70104740
};

double qnorm5(double p, double mu, double sigma, int lower_tail, int log_p) {
    assert(sigma >= 0);
    if (sigma == 0) { return mu; }

#define R_D_Cval(p)     (lower_tail ? (0.5 - (p) + 0.5) : (p))
#define R_D_Lval(p)     (lower_tail ? (p) : (0.5 - (p) + 0.5))
#define R_DT_qIv(p)     (log_p ? (lower_tail ? exp(p) : - expm1(p)) : R_D_Lval(p))
#define R_DT_CIv(p)     (log_p ? (lower_tail ? -expm1(p) : exp(p)) : R_D_Cval(p))

    DBL_T p_, q, r, val;
    p_ = R_DT_qIv(p);
    q  = p_ - 0.5;

    if (fabs(q) <= .425) {
        r   = .180625 - q * q;
        val = q * (((((((r * 2509.0809287301226727 +
                         33430.575583588128105) * r + 67265.770927008700853) * r +
                       45921.953931549871457) * r + 13731.693765509461125) * r +
                     1971.5909503065514427) * r + 133.14166789178437745) * r +
                   3.387132872796366608)
              / (((((((r * 5226.495278852854561 +
                       28729.085735721942674) * r + 39307.89580009271061) * r +
                     21213.794301586595867) * r + 5394.1960214247511077) * r +
                   687.1870074920579083) * r + 42.313330701600911252) * r + 1.);
    } else {
        if (log_p && ((lower_tail && q <= 0) || (!lower_tail && q > 0))) {
            r = p;
        } else {
            r = log((q > 0) ? R_DT_CIv(p) : p_);
        }
        r = sqrt(-r);
        if (r <= 5.) {
            r += -1.6;
            val = (((((((r * 7.7454501427834140764e-4 +
                         .0227238449892691845833) * r + .24178072517745061177) *
                       r + 1.27045825245236838258) * r +
                      3.64784832476320460504) * r + 5.7694972214606914055) *
                    r + 4.6303378461565452959) * r +
                   1.42343711074968357734)
                  / (((((((r *
                           1.05075007164441684324e-9 + 5.475938084995344946e-4) *
                          r + .0151986665636164571966) * r +
                         .14810397642748007459) * r + .68976733498510000455) *
                       r + 1.6763848301838038494) * r +
                      2.05319162663775882187) * r + 1.);
        } else if (r >= 816) {
            val = r * M_SQRT2;
        } else {
            r += -5.;
            val = (((((((r * 2.01033439929228813265e-7 +
                         2.71155556874348757815e-5) * r +
                        .0012426609473880784386) * r + .026532189526576123093) *
                      r + .29656057182850489123) * r +
                     1.7848265399172913358) * r + 5.4637849111641143699) *
                   r + 6.6579046435011037772)
                  / (((((((r *
                           2.04426310338993978564e-15 + 1.4215117583164458887e-7) *
                          r + 1.8463183175100546818e-5) * r +
                         7.868691311456132591e-4) * r + .0148753612908506148525)
                       * r + .13692988092273580531) * r +
                      .59983220655588793769) * r + 1.);
        }

        if (q < 0.0) { val = -val; }
    }
    return mu + sigma * val;

#undef R_D_Cval
#undef R_D_Lval
#undef R_DT_qIv
#undef R_DT_CIv
}

DBL_T norm_rand() {
    DBL_T u1 = (int) (BIG * unif_rand()) + unif_rand();
    return qnorm5(u1 / BIG, 0.0, 1.0, 1, 0);
}