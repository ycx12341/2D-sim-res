set.seed(874512)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of rn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of R_{init.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of P_{ext.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of P_{mit.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,5], unif.sample)
paras.r7.output.pert <- vector(mode = "list")
set.seed(874512)
RNGkind(sample.kind = "Rejection")
for (i in 1:length(paras.r7.output)) {
ls.temp <- paras.r7.output[[i]]
# Read the unperturbed data
den.mat.d1.temp.unpert <- ls.temp$den.mat.d1
den.mat.d3.temp.unpert <- ls.temp$den.mat.d3
# Create empty matrices to store perturbed data
den.mat.d1.temp.pert <- matrix(0, nrow = nrow(den.mat.d1.temp.unpert),
ncol = ncol(den.mat.d1.temp.unpert))
den.mat.d3.temp.pert <- matrix(0, nrow = nrow(den.mat.d3.temp.unpert),
ncol = ncol(den.mat.d3.temp.unpert))
# Add perturbation (to non-zero data only)
for (j in 1:length(den.mat.d1.temp.unpert)) {
if(den.mat.d1.temp.unpert[j] != 0) {
den.mat.d1.temp.pert[j] <- rnorm(1, den.mat.d1.temp.unpert[j], sd = sd.r7.d1.min)
while (den.mat.d1.temp.pert[j] < 0 || den.mat.d1.temp.pert[j] > 1) {
den.mat.d1.temp.pert[j] <- rnorm(1, den.mat.d1.temp.unpert[j], sd = sd.r7.d1.min)
}
}
if (den.mat.d3.temp.unpert[j] != 0) {
den.mat.d3.temp.pert[j] <- rnorm(1, den.mat.d3.temp.unpert[j], sd = sd.r7.d3.min)
while (den.mat.d3.temp.pert[j] < 0 || den.mat.d3.temp.pert[j] > 1) {
den.mat.d3.temp.pert[j] <- rnorm(1, den.mat.d3.temp.unpert[j], sd = sd.r7.d3.min)
}
}
}
# Sum of squared differences between the perturbed densities and the observed densities
sse.d1.temp <- sum((ref.den$t1.ref.den - den.mat.d1.temp.pert)^2)
sse.d3.temp <- sum((ref.den$t3.ref.den - den.mat.d3.temp.pert)^2)
diff.temp.pert <- sum(sse.d1.temp, sse.d3.temp)
# Store each set of perturbed data into the list
paras.r7.output.pert[[i]] <- list(den.mat.d1.pert = den.mat.d1.temp.pert,
den.mat.d3.pert = den.mat.d3.temp.pert,
diff = diff.temp.pert)
# Name the elements in the list with correct indices
names(paras.r7.output.pert)[i] <- paste0("ls_r7_",i,"_pert")
print(i)
}
# Sort the sum of squared differences
ls.r7.pert <- matrix(0, nrow = length(ls.r7[,2])
,ncol = 2)
for (i in 1:length(ls.r7[,2])) {
ls.r7.pert[i,] <- c(i, as.double(paras.r7.output.pert[[i]]$diff))
}
ls.r7.pert.sort <- order(ls.r7.pert[,2])
ls.r7.pert.sort.min <- ls.r7.pert.sort[1:200]
View(ls.r7.crage)
# An empty matrix used to store all the coverage probabilities
# regarding each perturbed dataset.
cov.mat <- matrix(0, nrow = 200, ncol = (length(paras.r7[1,]) - 1))
# Coverage probabilities
for (i in 1:200) {
# Read in the information matrix regarding each perturbed dataset
info.mat.temp <- ls.r7.crage[[i]]$info.mat
# Remove the parameter set which generated the perturbed dataset,
# in order to keep the indices consistent
paras.r7.corres <- paras.r7[-ls.r7.pert.sort.min[i],]
# For each parameter, calculate its coverage probability
prob.vec <- vector()
for (j in 1:(length(paras.r7[1,]) - 1)) {
cov.ind.temp <- which(paras.r7.corres[, (j + 1)] <= paras.r7[ls.r7.pert.sort.min[i], (j + 1)])
prob.temp <- sum(info.mat.temp[cov.ind.temp, length(info.mat.temp[1,])])/sum(info.mat.temp[,length(info.mat.temp[1,])])
# prob.temp <- length(cov.ind.temp)/length(info.mat.temp[,8])
# prob.temp <- (1 + length(cov.ind.temp))/(2 + length(info.mat.temp[,8]))
prob.vec <- c(prob.vec, prob.temp)
}
# Store the coverage probability corresponding to each perturbed dataset into
# each row of the coverage probability matrix.
cov.mat[i, ] <- prob.vec
}
# Store the coverage probabilities
write.table(cov.mat, "Coverage probabilities glioma r7 d1 d3 perturbed separately non zero only.txt")
# Histograms
set.seed(874512)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of rn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of R_{init.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of P_{ext.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of P_{mit.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,5], unif.sample)
Coverage_test_disp_wt_prob_r6_d1_d3_pert_sep <- readRDS("~/Academia Yunchen/Glioma simulations/Second set of invasion pattern/40_40 (less fixed static time wider r prior correct chi 5ps)/Coverage test on run 2 final result/Coverage_test_disp_wt_prob_r6_d1_d3_pert_sep.rds")
Coverage_test_disp_wt_prob_r7_d1_d3_pert_sep <- readRDS("~/Academia Yunchen/Glioma simulations/Second set of invasion pattern/40_40 (less fixed static time wider r prior correct chi 5ps)/Coverage test on run 2 final result/Coverage_test_disp_wt_prob_r7_d1_d3_pert_sep.rds")
View(Coverage_test_disp_wt_prob_r6_d1_d3_pert_sep)
View(Coverage_test_disp_wt_prob_r7_d1_d3_pert_sep)
cov.mat <- read.table("Coverage probabilities glioma r7 d1 d3 perturbed separately non zero only.txt",
sep = "", header = TRUE)
# Histograms
set.seed(874512)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of rn",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of R_{init.}",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of P_{ext.}",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of P_{mit.}",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,5], unif.sample)
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of rn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
hist(cov.mat[,1], main = "Coverage check of dn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of rn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of R_{init.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of P_{ext.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of P_{mit.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,5], unif.sample)
setwd("F:/学术/Glioma simulation/Second set of invasion pattern/40_40 (less fixed static time wider r prior correct chi 5ps)/Coverage test on run 1 final result")
cov.mat <- read.table("Coverage probabilities glioma r7 d1 d3 perturbed separately non zero only.txt", sep = "",
header = TRUE)
# Histograms
set.seed(874513)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of rn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of R_{init.}'s final sample",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,3], main = "Coverage check of R_{init.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of P_{ext.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of P_{mit.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,5], unif.sample)
setwd("F:/学术/Glioma simulation/Second set of invasion pattern/40_40 (less fixed static time wider r prior correct chi 5ps)/Coverage test on run 3 final result")
cov.mat <- read.table("Coverage probabilities glioma r7 d1 d3 perturbed separately non zero only.txt", sep = "",
header = TRUE)
# Histograms
set.seed(874514)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities")
hist(cov.mat[,1], main = "Coverage check of dn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of rn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of R_{init.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of P_{ext.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of P_{mit.}",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,5], unif.sample)
hist(cov.mat[,5], main = "Coverage check of P_{mit.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,5], unif.sample)
cov.mat <- read.table("Coverage probabilities r11 non zero only.txt", sep = "",
header = TRUE)
setwd("F:/学术/SCC cells simulation/SCC cells simulation (patterns fitted separately correct set.seed)/Non integer cols decreasing ess 2500 1500 (positive dens)/Day 3 simulations/CT on run 3 d3")
setwd("F:/学术/SCC cells simulation/SCC cells simulation (patterns fitted separately correct set.seed)/Non integer cols decreasing ess 2500 1500 (positive dens)/Day 3 simulations/CT on run 3 d3")
cov.mat <- read.table("Coverage probabilities r11 non zero only.txt", sep = "",
header = TRUE)
# Histograms
set.seed(874512)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,1], main = "Coverage check of dn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of gamma's final sample",
xlim = c(0,1), xlab = "Probabilities")
hist(cov.mat[,2], main = "Coverage check of gamma's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of rn's final sample",
xlim = c(0,1), xlab = "Probabilities")
hist(cov.mat[,3], main = "Coverage check of rn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of eta's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of dm's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,5], unif.sample)
hist(cov.mat[,6], main = "Coverage check of alpha's final sample",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,6], unif.sample)
hist(cov.mat[,6], main = "Coverage check of alpha's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,6], unif.sample)
hist(cov.mat[,7], main = "Coverage check of R_{init.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,7], unif.sample)
hist(cov.mat[,8], main = "Coverage check of P_{ext.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,8], unif.sample)
hist(cov.mat[,9], main = "Coverage check of P_{mit.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,9], unif.sample)
setwd("F:/学术/SCC cells simulation/SCC cells simulation (patterns fitted separately correct set.seed)/Non integer cols decreasing ess 2500 1500 (positive dens)/Day 6 simulations/CT on run 2 d6")
cov.mat <- read.table("Coverage probabilities r6 non zero only.txt", sep = "",
header = TRUE)
# Histograms
set.seed(874514)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities")
hist(cov.mat[,1], main = "Coverage check of dn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of gamma's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of rn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,3], unif.sample)
View(cov.mat)
hist(cov.mat[,4], main = "Coverage check of eta's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of dm's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,5], unif.sample)
hist(cov.mat[,6], main = "Coverage check of alpha's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,6], unif.sample)
hist(cov.mat[,7], main = "Coverage check of P_{ext.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,7], unif.sample)
hist(cov.mat[,8], main = "Coverage check of P_{mit.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,8], unif.sample)
setwd("F:/学术/SCC cells simulation/SCC cells simulation (patterns fitted separately correct set.seed)/Non integer cols decreasing ess 2500 1500 (positive dens)/Day 9 simulations/CT on run 1 d9")
cov.mat <- read.table("Coverage probabilities r6 non zero only.txt", sep = "",
header = TRUE)
# Histograms
set.seed(874513)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of gamma",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of rn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of eta",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of dm",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,5], unif.sample)
hist(cov.mat[,6], main = "Coverage check of alpha",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,6], unif.sample)
hist(cov.mat[,7], main = "Coverage check of P_{ext.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,7], unif.sample)
hist(cov.mat[,8], main = "Coverage check of P_{mit.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,8], unif.sample)
# Histograms
set.seed(874513)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of gamma's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of rn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of eta's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of dm's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,5], unif.sample)
hist(cov.mat[,6], main = "Coverage check of alpha's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,6], unif.sample)
hist(cov.mat[,7], main = "Coverage check of P_{ext.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,7], unif.sample)
hist(cov.mat[,8], main = "Coverage check of P_{mit.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,8], unif.sample)
setwd("F:/学术/SCC cells simulation/SCC cells simulation (patterns fitted separately correct set.seed)/Non integer cols decreasing ess 2500 1500 (positive dens)/Day 12 simulations/CT on run 1 d12")
cov.mat <- read.table("Coverage probabilities r6 non zero only.txt", sep = "",
header = TRUE)
# Histograms
set.seed(874513)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of gamma's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of rn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of eta's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of dm's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,5], unif.sample)
hist(cov.mat[,6], main = "Coverage check of alpha's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,6], unif.sample)
hist(cov.mat[,7], main = "Coverage check of P_{ext.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,7], unif.sample)
hist(cov.mat[,8], main = "Coverage check of P_{mit.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,8], unif.sample)
setwd("F:/学术/SCC cells simulation/SCC cells simulation (patterns fitted separately correct set.seed)/Non integer cols decreasing ess 2500 1500 (positive dens)/Day 14 simulations/CT on run 2 d14")
cov.mat <- read.table("Coverage probabilities r5 non zero only.txt", sep = "",
header = TRUE)
# Histograms
set.seed(874514)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities")
hist(cov.mat[,1], main = "Coverage check of dn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of gamma's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of rn's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of eta's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of dm's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,5], unif.sample)
hist(cov.mat[,6], main = "Coverage check of alpha's final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,6], unif.sample)
hist(cov.mat[,7], main = "Coverage check of P_{ext.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,7], unif.sample)
hist(cov.mat[,8], main = "Coverage check of P_{mit.}'s final sample",
xlim = c(0,1), xlab = "Probabilities", freq = FALSE)
ks.test(cov.mat[,8], unif.sample)
setwd("F:/学术/Glioma simulation/Second set of invasion pattern/40_40 (less fixed static time wider r prior correct chi 5ps)/Run 1")
View(cov.mat)
(1.546223 - 1.50281)/1.546223
# Reduction in average least square difference is lower than 5%, algorithm can
# be terminated now!
(1.546223 - 1.50281)/1.546223*100
setwd("F:/学术/Glioma simulation/Second set of invasion pattern/40_40 (less fixed static time wider r prior correct chi 5ps)/Coverage test on run 1 final result")
# Observed data (glioma cell density)
ref.den <- read_rds("Glioma simulation full reference densities.rds")
library(readr)
# Observed data (glioma cell density)
ref.den <- read_rds("Glioma simulation full reference densities.rds")
View(ref.den)
ref.den[["t3.ref.den"]]
length(which(ref.den$t3.ref.den > 0))
set.seed(874513)
# RNGkind(sample.kind = "Rejection")
unif.sample <- runif(200, 0, 1)
unif.sample
set.seed(874513)
RNGkind(sample.kind = "Rejection")
unif.sample <- runif(200, 0, 1)
unif.sample
60*28/48
1/59/59/4/0.0025
1/47/47/4/0.004
setwd("F:/学术/SCC cells simulation/SCC cells simulation (patterns fitted separately correct set.seed)/Non integer cols decreasing ess 2500 1500 (positive dens)/Day 3 simulations/Run 1")
ls.r1 <- as.matrix(read.table("Round 1 Least Square.txt", sep = "",
header = TRUE))
View(ls.r1)
length(which(is.na(ls.r1[,2])))
reduction.disp(prev = 0.2364628, curr = 0.2211397)
reduction.disp(prev = 0.2211397, curr = 0.2106556)
setwd("F:/学术/SCC cells simulation/SCC cells simulation (patterns fitted separately correct set.seed)/Non integer cols decreasing ess 2500 1500 (positive dens)/Day 3 simulations/CT on run 3 d3")
# Clear the workspace and load the necessary packages.
rm(list = ls())
library(readr)
library(doParallel)
# Set the directory to store the results.
# save.sims.dir <- Cov_results_r11
save.sims.dir <- "Cov_results_r11_pert_all"
save.sims <- TRUE
if (save.sims) {
if (!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
# Set the cluster.
n.thread <- detectCores()/2
cl <- makeCluster(n.thread)
registerDoParallel(cl)
# Read in the final parameter values.
paras.r11 <- read.table("Round 11 parameters.txt", sep = "", header = TRUE)
# Directory which stores the simulation output.
sims.dir <- "LS_results_r11"
# Check if there are still NaNs in the final output.
ls.r11 <- read.table("Round 11 Least Square.txt",
sep = "", header = TRUE)
length(which(is.na(ls.r11[,2]))) # 22 singular values.
# Remove the singular simulation output and their corresponding parameter
# vectors.
ls.r11.valid <- ls.r11[-which(is.na(ls.r11[,2])), ]
paras.r11.valid <- paras.r11[-which(is.na(ls.r11[,2])), ]
View(paras.r11.valid)
which(is.na(ls.r11[,2]))
setwd("F:/学术/SCC cells simulation/SCC cells simulation (patterns fitted separately correct set.seed)/Non integer cols decreasing ess 2500 1500 (positive dens)/Day 3 simulations/CT on run 3 d3")
setwd("F:/学术/SCC cells simulation/SCC cells simulation (patterns fitted separately correct set.seed)/Non integer cols decreasing ess 2500 1500 (positive dens)/Day 3 simulations/CT on run 3 d3")
setwd("F:/学术/SCC cells simulation/SCC cells simulation (patterns fitted separately correct set.seed)/Non integer cols decreasing ess 2500 1500 (positive dens)/Day 3 simulations/Run 2")
setwd("F:/学术/SCC cells simulation/SCC cells simulation (patterns fitted separately correct set.seed)/Non integer cols decreasing ess 2500 1500 (positive dens)/Day 3 simulations/Run 3")
# Load the file that contains the functions.
source("PDE 2D ABC functions adjusted SCC.R")
reduction.disp(prev = 0.2316742, curr = 0.2178779)
reduction.disp(prev = 0.2178779, curr = 0.2087382)
setwd("F:/学术/SCC cells simulation/SCC cells simulation (patterns fitted separately correct set.seed)/Non integer cols decreasing ess 2500 1500 (positive dens)/Day 9 simulations/Run 1")
setwd("F:/学术/SCC cells simulation/SCC cells simulation (patterns fitted separately correct set.seed)/Non integer cols decreasing ess 2500 1500 (positive dens)/Day 9 simulations/Run 1")
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
source("PDE 2D ABC functions adjusted SCC.R")
save.sims.dir <- "LS_results"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
set.seed(874513)
RNGkind(sample.kind = "Rejection")
dn <- runif(n.sims, 0.000069, 0.02)
gamma <- runif(n.sims, 0.005, 0.26)
rn <- runif(n.sims, 0.0008, 0.08)
eta <- runif(n.sims, 7,18)
dm <- runif(n.sims,0.0001,0.033)
alpha <- runif(n.sims,0.07,0.18)
prob.death <- runif(n.sims, 0.01, 0.1)
prob.prof <- runif(n.sims, 0.2, 1)
paras.table <- cbind(dn, gamma, rn, eta, dm, alpha,
prob.death, prob.prof)
registerDoRNG(874513, once = TRUE)
RNGkind(sample.kind = "Rejection")
tic()
ests_ver2 <- foreach (i = 1:5, .combine = rbind) %dopar% {
sse.res.temp <- calculate.sse(pars = paras.table[i, 1:6],
prob.death = paras.table[i, 7], prob.prof = paras.table[i, 8])
readr::write_rds(sse.res.temp,
path = paste0("./", save.sims.dir, "/Round_1_paras", i, "_res.rds"))
c(i, sse.res.temp$diff)
}
toc()
stopCluster(cl)
View(ests_ver2)
