# Unperturbed model output
paras.r11.output <- vector(mode = "list")
for (i in 1:length(ls.r11.valid[,2])) {
res.temp <- read_rds(paste0("./", sims.dir,
"/Round_11_paras",ls.r11.valid[i,1],"_res.rds"))
ls.temp <- list(den.mat.d3 = res.temp$den.mat.d3)
paras.r11.output[[i]] <- ls.temp
print(i)
names(paras.r11.output)[i] <- paste0("ls_r11_",ls.r11.valid[i,1])
}
write_rds(paras.r11.output, "Full output paras r11 run 3 valid.rds")
View(ls.r11.valid)
ls.r11.min <- read_rds("Round_11_paras9900_res.rds")
sd.r11.d3.min <- sd(ls.r11.min$den.mat.d3 - t3.ref.den)
paras.r11.output.pert <- vector(mode = "list")
set.seed(874512)
RNGkind(sample.kind = "Rejection")
for (i in 1:length(paras.r11.output)) {
ls.temp <- paras.r11.output[[i]]
# Read the unperturbed data
den.mat.d3.temp.unpert <- ls.temp$den.mat.d3
# Create empty matrices to store perturbed data
den.mat.d3.temp.pert <- matrix(0, nrow = nrow(den.mat.d3.temp.unpert),
ncol = ncol(den.mat.d3.temp.unpert))
# Add perturbation (to non-zero data only)
for (j in 1:length(den.mat.d3.temp.unpert)) {
if(den.mat.d3.temp.unpert[j] != 0) {
den.mat.d3.temp.pert[j] <- rnorm(1, den.mat.d3.temp.unpert[j], sd = sd.r11.d3.min)
while (den.mat.d3.temp.pert[j] < 0 || den.mat.d3.temp.pert[j] > 1) {
den.mat.d3.temp.pert[j] <- rnorm(1, den.mat.d3.temp.unpert[j], sd = sd.r11.d3.min)
}
}
}
# Sum of squared differences between the perturbed densities and the observed densities
sse.d3.temp <- sum((t3.ref.den - den.mat.d3.temp.pert)^2)
# Store each set of perturbed data into the list
paras.r3.output.pert[[i]] <- list(den.mat.d3.pert = den.mat.d3.temp.pert,
diff = sse.d3.temp)
# Name the elements in the list with correct indices
names(paras.r3.output.pert)[i] <- paste0("ls_r11_",ls.r11.valid[i,1],"_pert")
print(i)
}
set.seed(874512)
RNGkind(sample.kind = "Rejection")
for (i in 1:length(paras.r11.output)) {
ls.temp <- paras.r11.output[[i]]
# Read the unperturbed data
den.mat.d3.temp.unpert <- ls.temp$den.mat.d3
# Create empty matrices to store perturbed data
den.mat.d3.temp.pert <- matrix(0, nrow = nrow(den.mat.d3.temp.unpert),
ncol = ncol(den.mat.d3.temp.unpert))
# Add perturbation (to non-zero data only)
for (j in 1:length(den.mat.d3.temp.unpert)) {
if(den.mat.d3.temp.unpert[j] != 0) {
den.mat.d3.temp.pert[j] <- rnorm(1, den.mat.d3.temp.unpert[j], sd = sd.r11.d3.min)
while (den.mat.d3.temp.pert[j] < 0 || den.mat.d3.temp.pert[j] > 1) {
den.mat.d3.temp.pert[j] <- rnorm(1, den.mat.d3.temp.unpert[j], sd = sd.r11.d3.min)
}
}
}
# Sum of squared differences between the perturbed densities and the observed densities
sse.d3.temp <- sum((t3.ref.den - den.mat.d3.temp.pert)^2)
# Store each set of perturbed data into the list
paras.r11.output.pert[[i]] <- list(den.mat.d3.pert = den.mat.d3.temp.pert,
diff = sse.d3.temp)
# Name the elements in the list with correct indices
names(paras.r11.output.pert)[i] <- paste0("ls_r11_",ls.r11.valid[i,1],"_pert")
print(i)
}
# Sort the sum of squared differences
ls.r11.valid.pert <- matrix(0, nrow = length(ls.r11.valid[,2])
,ncol = 2)
for (i in 1:length(ls.r11.valid.pert[,2])) {
ls.r11.valid.pert[i,] <- c(ls.r11.valid[i, 1],
as.double(paras.r11.output.pert[[i]]$diff))
}
ls.r11.valid.pert.sort <- order(ls.r11.valid.pert[,2])
ls.r11.valid.pert.sort.min <- ls.r11.valid.pert.sort[1:200]
# Index in the full dataset (from 1 - 10000)
ls.r11.pert.sort.min.index <- ls.r11.valid.pert[ls.r11.valid.pert.sort[1:200], 1]
View(ls.r11.valid.pert)
# Extract out the corresponding 200 perturbed model outputs that have the
# minimum discrepancy with the reference data.
paras.r11.output.pert.full <- paras.r11.output.pert
paras.r11.output.pert <- paras.r11.output.pert[ls.r11.valid.pert.sort.min]
ls.r11.diff.mat <- vector(mode = "list")
for (i in 1:length(paras.r11.output.pert)) {
# For each perturbed dataset, record its discrepancy with other unperturbed
# model output, corresponding weights and resampling probabilities.
diff.mat <- matrix(0, nrow = length(paras.r11.valid[,2]), ncol = 2)
paras.r11.output.pert.temp <- paras.r11.output.pert[[i]]
for (j in 1:length(paras.r11.valid[,2])) {
# Read in the unperturbed model output.
res.temp <- paras.r11.output[[j]]
# Calculate the sum of squared differences between the unperturbed model output and the
# selected set of perturbed data.
sse.d3.temp <- sum((res.temp$den.mat.d3 - paras.r11.output.pert.temp$den.mat.d3.pert)^2)
# Append index, discrepancy and weights into the first three elements of each row
# of the matrix
diff.mat[j, 1:2] <- c(ls.r11.valid.pert[j, 1], sse.d3.temp)
# print(j)
}
# Remove the parameter set that corresponds to the current perturbed model output
diff.mat <- diff.mat[-ls.r11.valid.pert.sort.min[i],]
# Store the info matrix in the list and name it with the corresponding index
ls.r11.diff.mat[[i]] <- diff.mat
names(ls.r11.diff.mat)[i] <- paste0("diff_mat_r11_",ls.r11.pert.sort.min.index[i])
# Progress tracking
print(i)
}
View(paras.r11.output.pert)
paras.r11.output.pert[["ls_r11_3529_pert"]][["den.mat.d3.pert"]]
kkk <- calculate.bw(ss.mat = ls.r11.diff.mat$diff_mat_r11_3529, lb.bw = 2.23, ub.bw = 2.35, ess.target = 1640.25, step.size = 0.01)
View(kkk)
kkk <- calculate.bw(ss.mat = ls.r11.diff.mat$diff_mat_r11_3529, lb.bw = 2.65, ub.bw = 2.77, ess.target = 1640.25, step.size = 0.01)
View(kkk)
kkk <- calculate.bw(ss.mat = ls.r11.diff.mat$diff_mat_r11_3529, lb.bw = 2.53, ub.bw = 2.65, ess.target = 1640.25, step.size = 0.01)
View(kkk)
View(kkk)
est <- foreach (i = 1:length(ls.r11.diff.mat), .combine = rbind) %dopar% {
diff.mat.temp <- ls.r6.diff.mat[[i]]
lb.bw.temp <- 2.53 #3.57
ub.bw.temp <- 2.65 #3.69
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 1640.25,
step.size = 0.01)
while (info.list.temp$bw.obj == lb.bw.temp || info.list.temp$bw.obj == ub.bw.temp) {
if (info.list.temp$bw.obj == lb.bw.temp) {
lb.bw.temp <- lb.bw.temp - 0.1
ub.bw.temp <- lb.bw.temp + 0.01
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 1640.25,
step.size = 0.01)
} else if (info.list.temp$bw.obj == ub.bw.temp) {
lb.bw.temp <- ub.bw.temp - 0.01
ub.bw.temp <- ub.bw.temp + 0.1
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 1640.25,
step.size = 0.01)
}
}
#ls.r5.crage[[i]] <- info.list.temp
readr::write_rds(info.list.temp, path = paste0("./", save.sims.dir,
"/info_list_r11_",
ls.r11.pert.sort.min.index[i], ".rds"))
#names(ls.r5.crage)[i] <- paste0("info_list_r5_",ls.r5.pert.sort.min.index[i])
c(i, info.list.temp$bw.obj, info.list.temp$ess.obj)
}
est <- foreach (i = 1:length(ls.r11.diff.mat), .combine = rbind) %dopar% {
diff.mat.temp <- ls.r11.diff.mat[[i]]
lb.bw.temp <- 2.53 #3.57
ub.bw.temp <- 2.65 #3.69
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 1640.25,
step.size = 0.01)
while (info.list.temp$bw.obj == lb.bw.temp || info.list.temp$bw.obj == ub.bw.temp) {
if (info.list.temp$bw.obj == lb.bw.temp) {
lb.bw.temp <- lb.bw.temp - 0.1
ub.bw.temp <- lb.bw.temp + 0.01
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 1640.25,
step.size = 0.01)
} else if (info.list.temp$bw.obj == ub.bw.temp) {
lb.bw.temp <- ub.bw.temp - 0.01
ub.bw.temp <- ub.bw.temp + 0.1
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 1640.25,
step.size = 0.01)
}
}
#ls.r5.crage[[i]] <- info.list.temp
readr::write_rds(info.list.temp, path = paste0("./", save.sims.dir,
"/info_list_r11_",
ls.r11.pert.sort.min.index[i], ".rds"))
#names(ls.r5.crage)[i] <- paste0("info_list_r5_",ls.r5.pert.sort.min.index[i])
c(i, info.list.temp$bw.obj, info.list.temp$ess.obj)
}
stopCluster(cl)
ls.r11.crage <- vector(mode = "list")
for (i in 1:length(ls.r11.diff.mat)) {
info.list.temp <- read_rds(paste0("./", save.sims.dir,
"/info_list_r11_",
ls.r11.pert.sort.min.index[i], ".rds"))
ls.r11.crage[[i]] <- info.list.temp
names(ls.r11.crage)[i] <- paste0("info_list_r11_",ls.r11.pert.sort.min.index[i])
}
View(ls.r11.crage)
View(ls.r11.diff.mat)
# Save the results into a .rds file
write_rds(ls.r11.crage, "Coverage_test_disp_wt_prob_r11_pert_non_zero.rds")
# Probabilities and check if they fit uniform distributions
paras.r11.valid <- cbind(ls.r11.valid[,1], paras.r11.valid)
# An empty matrix used to store all the coverage probabilities
# regarding each perturbed dataset.
cov.mat <- matrix(0, nrow = 200, ncol = (length(paras.r11.valid[1,]) - 1))
# Coverage probabilities
for (i in 1:200) {
# Read in the information matrix regarding each perturbed dataset
info.mat.temp <- ls.r11.crage[[i]]$info.mat
# Remove the parameter set which generated the perturbed dataset,
# in order to keep the indices consistent
paras.r11.valid.corres <- paras.r11.valid[-ls.r11.valid.pert.sort.min[i],]
# For each parameter, calculate its coverage probability
prob.vec <- vector()
for (j in 1:(length(paras.r11.valid[1,]) - 1)) {
cov.ind.temp <- which(paras.r11.valid.corres[, (j + 1)] <= paras.r11.valid[ls.r11.valid.pert.sort.min[i], (j + 1)])
prob.temp <- sum(info.mat.temp[cov.ind.temp, length(info.mat.temp[1,])])/sum(info.mat.temp[,length(info.mat.temp[1,])])
# prob.temp <- length(cov.ind.temp)/length(info.mat.temp[,8])
# prob.temp <- (1 + length(cov.ind.temp))/(2 + length(info.mat.temp[,8]))
prob.vec <- c(prob.vec, prob.temp)
}
# Store the coverage probability corresponding to each perturbed dataset into
# each row of the coverage probability matrix.
cov.mat[i, ] <- prob.vec
}
# Store the coverage probabilities
write.table(cov.mat, "Coverage probabilities r11 non zero only.txt")
# Histograms
set.seed(874512)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of gamma",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of rn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of eta",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,4], unif.sample)
View(paras.r11.valid)
hist(cov.mat[,5], main = "Coverage check of dm",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,5], unif.sample)
hist(cov.mat[,6], main = "Coverage check of alpha",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,6], unif.sample)
hist(cov.mat[,7], main = "Coverage check of P_{ext.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,7], unif.sample)
hist(cov.mat[,7], main = "Coverage check of R_{init.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,7], unif.sample)
hist(cov.mat[,8], main = "Coverage check of P_{ext.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,8], unif.sample)
hist(cov.mat[,9], main = "Coverage check of P_{mit.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,9], unif.sample)
paras.r11.output.pert <- vector(mode = "list")
set.seed(874512)
RNGkind(sample.kind = "Rejection")
for (i in 1:length(paras.r11.output)) {
ls.temp <- paras.r11.output[[i]]
# Read the unperturbed data
den.mat.d3.temp.unpert <- ls.temp$den.mat.d3
# Create empty matrices to store perturbed data
den.mat.d3.temp.pert <- matrix(0, nrow = nrow(den.mat.d3.temp.unpert),
ncol = ncol(den.mat.d3.temp.unpert))
# Add perturbation (to non-zero data only)
for (j in 1:length(den.mat.d3.temp.unpert)) {
#if(den.mat.d3.temp.unpert[j] != 0) {
den.mat.d3.temp.pert[j] <- rnorm(1, den.mat.d3.temp.unpert[j], sd = sd.r11.d3.min)
while (den.mat.d3.temp.pert[j] < 0 || den.mat.d3.temp.pert[j] > 1) {
den.mat.d3.temp.pert[j] <- rnorm(1, den.mat.d3.temp.unpert[j], sd = sd.r11.d3.min)
}
#}
}
# Sum of squared differences between the perturbed densities and the observed densities
sse.d3.temp <- sum((t3.ref.den - den.mat.d3.temp.pert)^2)
# Store each set of perturbed data into the list
paras.r11.output.pert[[i]] <- list(den.mat.d3.pert = den.mat.d3.temp.pert,
diff = sse.d3.temp)
# Name the elements in the list with correct indices
names(paras.r11.output.pert)[i] <- paste0("ls_r11_",ls.r11.valid[i,1],"_pert")
print(i)
}
# Sort the sum of squared differences
ls.r11.valid.pert <- matrix(0, nrow = length(ls.r11.valid[,2])
,ncol = 2)
for (i in 1:length(ls.r11.valid.pert[,2])) {
ls.r11.valid.pert[i,] <- c(ls.r11.valid[i, 1],
as.double(paras.r11.output.pert[[i]]$diff))
}
ls.r11.valid.pert.sort <- order(ls.r11.valid.pert[,2])
ls.r11.valid.pert.sort.min <- ls.r11.valid.pert.sort[1:200]
# Index in the full dataset (from 1 - 10000)
ls.r11.pert.sort.min.index <- ls.r11.valid.pert[ls.r11.valid.pert.sort[1:200], 1]
# Extract out the corresponding 200 perturbed model outputs that have the
# minimum discrepancy with the reference data.
paras.r11.output.pert.full <- paras.r11.output.pert
paras.r11.output.pert <- paras.r11.output.pert[ls.r11.valid.pert.sort.min]
View(paras.r11.output.pert)
paras.r11.output.pert[["ls_r11_3787_pert"]][["den.mat.d3.pert"]]
ls.r11.diff.mat <- vector(mode = "list")
for (i in 1:length(paras.r11.output.pert)) {
# For each perturbed dataset, record its discrepancy with other unperturbed
# model output, corresponding weights and resampling probabilities.
diff.mat <- matrix(0, nrow = length(paras.r11.valid[,2]), ncol = 2)
paras.r11.output.pert.temp <- paras.r11.output.pert[[i]]
for (j in 1:length(paras.r11.valid[,2])) {
# Read in the unperturbed model output.
res.temp <- paras.r11.output[[j]]
# Calculate the sum of squared differences between the unperturbed model output and the
# selected set of perturbed data.
sse.d3.temp <- sum((res.temp$den.mat.d3 - paras.r11.output.pert.temp$den.mat.d3.pert)^2)
# Append index, discrepancy and weights into the first three elements of each row
# of the matrix
diff.mat[j, 1:2] <- c(ls.r11.valid.pert[j, 1], sse.d3.temp)
# print(j)
}
# Remove the parameter set that corresponds to the current perturbed model output
diff.mat <- diff.mat[-ls.r11.valid.pert.sort.min[i],]
# Store the info matrix in the list and name it with the corresponding index
ls.r11.diff.mat[[i]] <- diff.mat
names(ls.r11.diff.mat)[i] <- paste0("diff_mat_r11_",ls.r11.pert.sort.min.index[i])
# Progress tracking
print(i)
}
View(est)
kkk <- calculate.bw(ss.mat = ls.r11.diff.mat$diff_mat_r11_3787, lb.bw = 3.12, ub.bw = 3.24, step.size = 1640.25)
kkk <- calculate.bw(ss.mat = ls.r11.diff.mat$diff_mat_r11_3787, lb.bw = 3.12, ub.bw = 3.24, ess.target = 1640.25, step.size = 0.01)
View(kkk)
kkk <- calculate.bw(ss.mat = ls.r11.diff.mat$diff_mat_r11_3787, lb.bw = 5.12, ub.bw = 5.24, ess.target = 1640.25, step.size = 0.01)
View(kkk)
kkk <- calculate.bw(ss.mat = ls.r11.diff.mat$diff_mat_r11_3787, lb.bw = 6.12, ub.bw = 6.24, ess.target = 1640.25, step.size = 0.01)
View(kkk)
which(est[,3] > 1640.25)
which(est[,3] > 1650.25)
which(est[,3] < 1630.25)
est <- foreach (i = 1:length(ls.r11.diff.mat), .combine = rbind) %dopar% {
diff.mat.temp <- ls.r11.diff.mat[[i]]
lb.bw.temp <- 6.12 # 2.53
ub.bw.temp <- 6.24 # 2.65
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 1640.25,
step.size = 0.01)
while (info.list.temp$bw.obj == lb.bw.temp || info.list.temp$bw.obj == ub.bw.temp) {
if (info.list.temp$bw.obj == lb.bw.temp) {
lb.bw.temp <- lb.bw.temp - 0.1
ub.bw.temp <- lb.bw.temp + 0.01
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 1640.25,
step.size = 0.01)
} else if (info.list.temp$bw.obj == ub.bw.temp) {
lb.bw.temp <- ub.bw.temp - 0.01
ub.bw.temp <- ub.bw.temp + 0.1
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 1640.25,
step.size = 0.01)
}
}
#ls.r5.crage[[i]] <- info.list.temp
readr::write_rds(info.list.temp, path = paste0("./", save.sims.dir,
"/info_list_r11_",
ls.r11.pert.sort.min.index[i], ".rds"))
#names(ls.r5.crage)[i] <- paste0("info_list_r5_",ls.r5.pert.sort.min.index[i])
c(i, info.list.temp$bw.obj, info.list.temp$ess.obj)
}
n.thread <- detectCores()/2
cl <- makeCluster(n.thread)
registerDoParallel(cl)
save.sims.dir <- "Cov_results_r11_pert_all"
save.sims <- TRUE
if (save.sims) {
if (!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
est <- foreach (i = 1:length(ls.r11.diff.mat), .combine = rbind) %dopar% {
diff.mat.temp <- ls.r11.diff.mat[[i]]
lb.bw.temp <- 6.12 # 2.53
ub.bw.temp <- 6.24 # 2.65
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 1640.25,
step.size = 0.01)
while (info.list.temp$bw.obj == lb.bw.temp || info.list.temp$bw.obj == ub.bw.temp) {
if (info.list.temp$bw.obj == lb.bw.temp) {
lb.bw.temp <- lb.bw.temp - 0.1
ub.bw.temp <- lb.bw.temp + 0.01
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 1640.25,
step.size = 0.01)
} else if (info.list.temp$bw.obj == ub.bw.temp) {
lb.bw.temp <- ub.bw.temp - 0.01
ub.bw.temp <- ub.bw.temp + 0.1
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 1640.25,
step.size = 0.01)
}
}
#ls.r5.crage[[i]] <- info.list.temp
readr::write_rds(info.list.temp, path = paste0("./", save.sims.dir,
"/info_list_r11_",
ls.r11.pert.sort.min.index[i], ".rds"))
#names(ls.r5.crage)[i] <- paste0("info_list_r5_",ls.r5.pert.sort.min.index[i])
c(i, info.list.temp$bw.obj, info.list.temp$ess.obj)
}
stopCluster(cl)
ls.r11.crage <- vector(mode = "list")
for (i in 1:length(ls.r11.diff.mat)) {
info.list.temp <- read_rds(paste0("./", save.sims.dir,
"/info_list_r11_",
ls.r11.pert.sort.min.index[i], ".rds"))
ls.r11.crage[[i]] <- info.list.temp
names(ls.r11.crage)[i] <- paste0("info_list_r11_",ls.r11.pert.sort.min.index[i])
}
View(ls.r11.crage)
View(est)
which(est[,3] > 1650.25)
which(est[,3] < 1630.25)
write_rds(ls.r6.crage, "Coverage_test_disp_wt_prob_r6_pert.rds")
write_rds(ls.r11.crage, "Coverage_test_disp_wt_prob_r11_pert.rds")
# Probabilities and check if they fit uniform distributions
paras.r11.valid <- cbind(ls.r11.valid[,1], paras.r11.valid)
paras.r11 <- read.table("Round 11 parameters.txt", sep = "", header = TRUE)
paras.r11.valid <- paras.r11[-which(is.na(ls.r11[,2])), ]
# Probabilities and check if they fit uniform distributions
paras.r11.valid <- cbind(ls.r11.valid[,1], paras.r11.valid)
# An empty matrix used to store all the coverage probabilities
# regarding each perturbed dataset.
cov.mat <- matrix(0, nrow = 200, ncol = (length(paras.r11.valid[1,]) - 1))
# Coverage probabilities
for (i in 1:200) {
# Read in the information matrix regarding each perturbed dataset
info.mat.temp <- ls.r11.crage[[i]]$info.mat
# Remove the parameter set which generated the perturbed dataset,
# in order to keep the indices consistent
paras.r11.valid.corres <- paras.r11.valid[-ls.r11.valid.pert.sort.min[i],]
# For each parameter, calculate its coverage probability
prob.vec <- vector()
for (j in 1:(length(paras.r11.valid[1,]) - 1)) {
cov.ind.temp <- which(paras.r11.valid.corres[, (j + 1)] <= paras.r11.valid[ls.r11.valid.pert.sort.min[i], (j + 1)])
prob.temp <- sum(info.mat.temp[cov.ind.temp, length(info.mat.temp[1,])])/sum(info.mat.temp[,length(info.mat.temp[1,])])
# prob.temp <- length(cov.ind.temp)/length(info.mat.temp[,8])
# prob.temp <- (1 + length(cov.ind.temp))/(2 + length(info.mat.temp[,8]))
prob.vec <- c(prob.vec, prob.temp)
}
# Store the coverage probability corresponding to each perturbed dataset into
# each row of the coverage probability matrix.
cov.mat[i, ] <- prob.vec
}
write.table(cov.mat, "Coverage probabilities r11.txt")
# Histograms
set.seed(874512)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of gamma",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of rn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of eta",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of dm",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,5], unif.sample)
hist(cov.mat[,6], main = "Coverage check of alpha",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,6], unif.sample)
hist(cov.mat[,7], main = "Coverage check of R_{init.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,7], unif.sample)
hist(cov.mat[,8], main = "Coverage check of P_{ext.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,8], unif.sample)
hist(cov.mat[,9], main = "Coverage check of P_{mit.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,9], unif.sample)
rm(list = ls())
library(readr)
library(doParallel)
cov.mat <- read.table("Coverage probabilities r11 d1 d3 non zero only.txt", sep = "",
header = TRUE)
cov.mat <- read.table("Coverage probabilities r11 non zero only.txt", sep = "",
header = TRUE)
# Histograms
set.seed(874512)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of gamma",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of rn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of eta",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of dm",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,5], unif.sample)
hist(cov.mat[,6], main = "Coverage check of alpha",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,6], unif.sample)
hist(cov.mat[,7], main = "Coverage check of R_{init.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,7], unif.sample)
hist(cov.mat[,8], main = "Coverage check of P_{ext.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,8], unif.sample)
hist(cov.mat[,9], main = "Coverage check of P_{mit.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,9], unif.sample)
9+8+8+8+8
38/41
