set.seed(123)
sample(c(0,1,2,3), size = 10, replace = TRUE)
set.seed(123)
RNGkind(sample.kind = "Rejection")
sample(c(0,1,2,3), size = 10, replace = TRUE)
kkk <- rnorm(20, 5, 9)
kkk
kkk <- runif(20, 0, 1)
kkk
scale(kkk)
sd(c(1))
sd(c(1,1))
install.packages("abctoolbox")
install.packages("abctools")
library(abctools)
?abctools
?cov.pi
data(musigma2)
library(ggplot2)
parameters <- data.frame(par.sim)
View(parameters)
sumstats <- data.frame(stat.sim)
View(sumstats)
covdiag <- cov.pi(param=parameters, sumstat=sumstats, testsets=1:100,
tol=seq(0.1,1,by=0.1), diagnostics=c("KS"))
View(covdiag)
qplot(x=tol, y=pvalue, facets=.~parameter, data=covdiag$diag)
qplot(x=mu, data=subset(covdiag$raw, tol==0.5))
View(covdiag)
covdiag[["diag"]][["parameter"]]
covdiag[["diag"]][["test"]]
covdiag[["diag"]][["pvalue"]]
covdiag[["diag"]][["tol"]]
View(covdiag)
covdiag[["raw"]][["testset"]]
setwd("D:/Academia/SCC cells simulation/Time dependent simulations/Simulations run 3")
load("D:/Academia/SCC cells simulation/Time dependent simulations/Simulations run 3/.RData")
View(paras.mean.mat.full)
setwd("D:/Academia/SCC cells simulation/Time dependent simulations/Simulations run 1")
setwd("D:/Academia/SCC cells simulation/Time dependent simulations/Simulations run 1")
load("D:/Academia/SCC cells simulation/Time dependent simulations/Simulations run 1/.RData")
View(paras.mean.mat.full)
paras.mean.mat.full[,c(29,37,38)]
setwd("D:/Academia/SCC cells simulation/Time dependent simulations/Simulations run 2")
load("D:/Academia/SCC cells simulation/Time dependent simulations/Simulations run 2/.RData")
# Clear the environment and read the source files.
rm(list = ls())
load("D:/Academia/SCC cells simulation/Time dependent simulations/Simulations run 2/.RData")
# Clear the environment and read the source files.
rm(list = ls())
source("PDE 2D ABC functions adjusted SCC (time-dependent parameters).R")
# Read in the corresponding parameter samples obtained at the end of every
# round.
paras.r1.run3 <- as.matrix(read.table("Round 1 initial time varying parameters.txt",
sep = "", header = TRUE))
paras.r2.run3 <- as.matrix(read.table("Round 2 parameters.txt", sep = "",
header = TRUE))
paras.r3.run3 <- as.matrix(read.table("Round 3 parameters.txt", sep = "",
header = TRUE))
paras.r4.run3 <- as.matrix(read.table("Round 4 parameters.txt", sep = "",
header = TRUE))
paras.r5.run3 <- as.matrix(read.table("Round 5 parameters.txt", sep = "",
header = TRUE))
paras.r6.run3 <- as.matrix(read.table("Round 6 parameters.txt", sep = "",
header = TRUE))
paras.r7.run3 <- as.matrix(read.table("Round 7 parameters.txt", sep = "",
header = TRUE))
paras.r8.run3 <- as.matrix(read.table("Round 8 parameters.txt", sep = "",
header = TRUE))
paras.r9.run3 <- as.matrix(read.table("Round 9 parameters.txt", sep = "",
header = TRUE))
paras.r10.run3 <- as.matrix(read.table("Round 10 parameters.txt", sep = "",
header = TRUE))
# Calculate the samples means for the parameters.
paras.r1.run3.mean <- apply(paras.r1.run3, 2 ,mean)
paras.r2.run3.mean <- apply(paras.r2.run3, 2 ,mean)
paras.r3.run3.mean <- apply(paras.r3.run3, 2 ,mean)
paras.r4.run3.mean <- apply(paras.r4.run3, 2 ,mean)
paras.r5.run3.mean <- apply(paras.r5.run3, 2 ,mean)
paras.r6.run3.mean <- apply(paras.r6.run3, 2 ,mean)
paras.r7.run3.mean <- apply(paras.r7.run3, 2 ,mean)
paras.r8.run3.mean <- apply(paras.r8.run3, 2 ,mean)
paras.r9.run3.mean <- apply(paras.r9.run3, 2 ,mean)
paras.r10.run3.mean <- apply(paras.r10.run3, 2 ,mean)
# Combine the averaged parameter estimates for each round into a single
# matrix.
paras.mean.mat <- rbind(paras.r1.run3.mean, paras.r2.run3.mean,
paras.r3.run3.mean, paras.r4.run3.mean,
paras.r5.run3.mean, paras.r6.run3.mean,
paras.r7.run3.mean, paras.r8.run3.mean,
paras.r9.run3.mean, paras.r10.run3.mean)
# For the time-dependent parameters, calculate their values at later periods
# based on the averaged estimate of the 1st period and the averaged estimates
# of regression coefficients in each round.
dn.varying.paras.vec <- dn.varying.paras(dn.init.par = paras.mean.mat[,1],
dn.quad.temp = paras.mean.mat[,10],
dn.lin.temp = paras.mean.mat[,11])
gamma.varying.paras.vec <- gamma.varying.paras(gamma.init.par = paras.mean.mat[,2],
gamma.quad.temp = paras.mean.mat[,12],
gamma.lin.temp = paras.mean.mat[,13])
rn.varying.paras.vec <- rn.varying.paras(rn.init.par = paras.mean.mat[,3],
rn.quad.temp = paras.mean.mat[,14],
rn.lin.temp = paras.mean.mat[,15])
eta.varying.paras.vec <- eta.varying.paras(eta.init.par = paras.mean.mat[,4],
eta.quad.temp = paras.mean.mat[,16],
eta.lin.temp = paras.mean.mat[,17])
alpha.varying.paras.vec <- alpha.varying.paras(alpha.init.par = paras.mean.mat[,6],
alpha.quad.temp = paras.mean.mat[,18],
alpha.lin.temp = paras.mean.mat[,19])
prob.prof.varying.paras.vec <- prob.prof.varying.paras(prob.prof.init.par = paras.mean.mat[,9],
prob.prof.quad.temp = paras.mean.mat[,20],
prob.prof.lin.temp = paras.mean.mat[,21])
# Combine these parameter values into a single matrix.
paras.mean.mat.full <- cbind(dn.varying.paras.vec, gamma.varying.paras.vec,
rn.varying.paras.vec, eta.varying.paras.vec,
paras.mean.mat[,5],
alpha.varying.paras.vec,
paras.mean.mat[,7],
paras.mean.mat[,8],
prob.prof.varying.paras.vec)
View(paras.mean.mat.full)
round(-1.259, digit = 2)
`paras r8 average result` <- readRDS("D:/Academia/SCC cells simulation/Time dependent simulations/Simulations run 1/paras r8 average result.rds")
View(`paras r8 average result`)
`paras r10 average result` <- readRDS("D:/Academia/SCC cells simulation/Time dependent simulations/Simulations run 2/paras r10 average result.rds")
View(`paras r10 average result`)
