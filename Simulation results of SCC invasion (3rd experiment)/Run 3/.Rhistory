# Clear the workspace and load the necessary packages.
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
# Load the file that contains the functions.
source("PDE 2D ABC functions adjusted SCC (time-dependent parameters).R")
# Set the directory to store the simulation results.
save.sims.dir <- "LS_results"
# Read in the least square differences.
ls.r1 <- vector()
for (i in 1:n.sims) {
res.temp <- read_rds(paste0("./", save.sims.dir,
"/Round_1_paras",i,"_res.rds"))
if (is.na(res.temp$diff.tot)) {
ls.temp <- c(NA, NA, NA, NA, NA, NA)
} else {
ls.temp <- c(res.temp$diff.tot, res.temp$sse.t3, res.temp$sse.t6,
res.temp$sse.t9, res.temp$sse.t12, res.temp$sse.t14)
}
ls.r1 <- rbind(ls.r1, ls.temp)
print(i)
}
n.sims <- 50000
# Read in the least square differences.
ls.r1 <- vector()
# Load the file that contains the functions.
source("PDE 2D ABC functions adjusted SCC (time-dependent parameters).R")
# Read in the least square differences.
ls.r1 <- vector()
for (i in 1:n.sims) {
res.temp <- read_rds(paste0("./", save.sims.dir,
"/Round_1_paras",i,"_res.rds"))
if (is.na(res.temp$diff.tot)) {
ls.temp <- c(NA, NA, NA, NA, NA, NA)
} else {
ls.temp <- c(res.temp$diff.tot, res.temp$sse.t3, res.temp$sse.t6,
res.temp$sse.t9, res.temp$sse.t12, res.temp$sse.t14)
}
ls.r1 <- rbind(ls.r1, ls.temp)
print(i)
}
ls.r1 <- unname(ls.r1)
# Combine the least square differences with the indices by column.
ls.r1 <- cbind(seq(1, n.sims, by = 1), ls.r1)
# Locate the singular values and take them away temporarily.
ind.nan <- which(is.na(ls.r1[, 2]))
ls.r1.no.nan <- ls.r1[-ind.nan, ]
# Calculate the average least square differences and locate the minimum one.
mean(ls.r1.no.nan[,2]) # 139.8628
View(ls.r1.no.nan)
# Write the least square differences into a .txt file.
write.table(ls.r1, "Round 1 Least Square.txt")
# Minimum result
ls.r1.min <- read_rds("Round_1_paras26752_res.rds")
# Calculate the SDs of the discrepancy between the best-fitted output
# and the reference data.
den.mat.d3.r1.min <- ls.r1.min$den.mat.d3
den.mat.d6.r1.min <- ls.r1.min$den.mat.d6
den.mat.d9.r1.min <- ls.r1.min$den.mat.d9
den.mat.d12.r1.min <- ls.r1.min$den.mat.d12
den.mat.d14.r1.min <- ls.r1.min$den.mat.d14
sd.den.mat.d3.r1.min <- sd(den.mat.d3.r1.min - t3.ref.den)
sd.den.mat.d6.r1.min <- sd(den.mat.d6.r1.min - t6.ref.den)
sd.den.mat.d9.r1.min <- sd(den.mat.d9.r1.min - t9.ref.den)
sd.den.mat.d12.r1.min <- sd(den.mat.d12.r1.min - t12.ref.den)
sd.den.mat.d14.r1.min <- sd(den.mat.d14.r1.min - t14.ref.den)
# Calculate the bandwidth factor which gives the desirable ESS. Note that since
# the parameter vectors which can return valid simulation output is less
# than 12500 in the current round, we chose the desirable ESS to be
# approximately half of the number of valid output.
info.list.r1 <- calculate.bw(ss.mat = ls.r1, min.sd.d3 = sd.den.mat.d3.r1.min,
min.sd.d6 = sd.den.mat.d6.r1.min,
min.sd.d9 = sd.den.mat.d9.r1.min,
min.sd.d12 = sd.den.mat.d12.r1.min,
min.sd.d14 = sd.den.mat.d14.r1.min,
ess.target = 4550, step.size = 0.0001)
View(info.list.r1)
write_rds(info.list.r1, "Round 1 information list.rds")
# Resample and record the parameters to be evaluated in the next round.
set.seed(123)
RNGkind(sample.kind = "Rejection")
paras.r2 <- abc_bcd(info.mat = info.list.r1$info.mat, paras.table)
write.table(paras.r2, "Round 2 parameters.txt")
# Read in the initial parameters from the stored .txt file.
paras.table <- as.matrix(read.table("Round 1 initial time varying parameters.txt",
sep = "", header = TRUE))
# Resample and record the parameters to be evaluated in the next round.
set.seed(123)
RNGkind(sample.kind = "Rejection")
paras.r2 <- abc_bcd(info.mat = info.list.r1$info.mat, paras.table)
write.table(paras.r2, "Round 2 parameters.txt")
setwd("D:/Academia/SCC cells simulation/Time dependent simulations/Simulations run 3")
# Read in the corresponding parameter samples obtained at the end of every
# round.
paras.r1.run3 <- as.matrix(read.table("Round 1 initial time varying parameters.txt",
sep = "", header = TRUE))
paras.r2.run3 <- as.matrix(read.table("Round 2 parameters.txt", sep = "",
header = TRUE))
paras.r3.run3 <- as.matrix(read.table("Round 3 parameters.txt", sep = "",
header = TRUE))
paras.r4.run3 <- as.matrix(read.table("Round 4 parameters.txt", sep = "",
header = TRUE))
paras.r5.run3 <- as.matrix(read.table("Round 5 parameters.txt", sep = "",
header = TRUE))
paras.r6.run3 <- as.matrix(read.table("Round 6 parameters.txt", sep = "",
header = TRUE))
paras.r7.run3 <- as.matrix(read.table("Round 7 parameters.txt", sep = "",
header = TRUE))
paras.r8.run3 <- as.matrix(read.table("Round 8 parameters.txt", sep = "",
header = TRUE))
paras.r9.run3 <- as.matrix(read.table("Round 9 parameters.txt", sep = "",
header = TRUE))
# For the time-dependent parameters, calculate their values at later periods
# based on the averaged estimate of the 1st period and the averaged estimates
# of regression coefficients in each round.
dn.varying.paras.vec <- dn.varying.paras(dn.init.par = paras.mean.mat[,1],
dn.quad.temp = paras.mean.mat[,10],
dn.lin.temp = paras.mean.mat[,11])
gamma.varying.paras.vec <- gamma.varying.paras(gamma.init.par = paras.mean.mat[,2],
gamma.quad.temp = paras.mean.mat[,12],
gamma.lin.temp = paras.mean.mat[,13])
# Combine the averaged parameter estimates for each round into a single
# matrix.
paras.mean.mat <- rbind(paras.r1.run3.mean, paras.r2.run3.mean,
paras.r3.run3.mean, paras.r4.run3.mean,
paras.r5.run3.mean, paras.r6.run3.mean,
paras.r7.run3.mean, paras.r8.run3.mean,
paras.r9.run3.mean)
# Calculate the samples means for the parameters.
paras.r1.run3.mean <- apply(paras.r1.run3, 2 ,mean)
paras.r2.run3.mean <- apply(paras.r2.run3, 2 ,mean)
paras.r3.run3.mean <- apply(paras.r3.run3, 2 ,mean)
paras.r4.run3.mean <- apply(paras.r4.run3, 2 ,mean)
paras.r5.run3.mean <- apply(paras.r5.run3, 2 ,mean)
paras.r6.run3.mean <- apply(paras.r6.run3, 2 ,mean)
paras.r7.run3.mean <- apply(paras.r7.run3, 2 ,mean)
paras.r8.run3.mean <- apply(paras.r8.run3, 2 ,mean)
paras.r9.run3.mean <- apply(paras.r9.run3, 2 ,mean)
# Combine the averaged parameter estimates for each round into a single
# matrix.
paras.mean.mat <- rbind(paras.r1.run3.mean, paras.r2.run3.mean,
paras.r3.run3.mean, paras.r4.run3.mean,
paras.r5.run3.mean, paras.r6.run3.mean,
paras.r7.run3.mean, paras.r8.run3.mean,
paras.r9.run3.mean)
# For the time-dependent parameters, calculate their values at later periods
# based on the averaged estimate of the 1st period and the averaged estimates
# of regression coefficients in each round.
dn.varying.paras.vec <- dn.varying.paras(dn.init.par = paras.mean.mat[,1],
dn.quad.temp = paras.mean.mat[,10],
dn.lin.temp = paras.mean.mat[,11])
gamma.varying.paras.vec <- gamma.varying.paras(gamma.init.par = paras.mean.mat[,2],
gamma.quad.temp = paras.mean.mat[,12],
gamma.lin.temp = paras.mean.mat[,13])
rn.varying.paras.vec <- rn.varying.paras(rn.init.par = paras.mean.mat[,3],
rn.quad.temp = paras.mean.mat[,14],
rn.lin.temp = paras.mean.mat[,15])
eta.varying.paras.vec <- eta.varying.paras(eta.init.par = paras.mean.mat[,4],
eta.quad.temp = paras.mean.mat[,16],
eta.lin.temp = paras.mean.mat[,17])
alpha.varying.paras.vec <- alpha.varying.paras(alpha.init.par = paras.mean.mat[,6],
alpha.quad.temp = paras.mean.mat[,18],
alpha.lin.temp = paras.mean.mat[,19])
prob.prof.varying.paras.vec <- prob.prof.varying.paras(prob.prof.init.par = paras.mean.mat[,9],
prob.prof.quad.temp = paras.mean.mat[,20],
prob.prof.lin.temp = paras.mean.mat[,21])
paras.mean.mat.full <- cbind(dn.varying.paras.vec, gamma.varying.paras.vec,
rn.varying.paras.vec, eta.varying.paras.vec,
paras.mean.mat[,5],
alpha.varying.paras.vec,
paras.mean.mat[,7],
paras.mean.mat[,8],
prob.prof.varying.paras.vec)
View(paras.mean.mat.full)
paras.r9.mean.mat.full <- rbind(dn.vals.r9, gamma.vals.r9, rn.vals.r9,
eta.vals.r9, rep(dm.vals.r9, 7),
alpha.vals.r9, rep(r.init.vals.r9, 6),
rep(p.ext.vals.r9, 6), p.mit.vals.r9)
# Extract the parameter estimates of the final round (final parameter estimates)
dn.vals.r9 <- paras.mean.mat.full[9, 1:7]
gamma.vals.r9 <- paras.mean.mat.full[9, 8:14]
rn.vals.r9 <- paras.mean.mat.full[9, 15:21]
eta.vals.r9 <- paras.mean.mat.full[9, 22:28]
dm.vals.r9 <- paras.mean.mat.full[9, 29]
alpha.vals.r9 <- paras.mean.mat.full[9, 30:36]
r.init.vals.r9 <- paras.mean.mat.full[9, 37]
p.ext.vals.r9 <- paras.mean.mat.full[9, 38]
p.mit.vals.r9 <- paras.mean.mat.full[9, 39:45]
paras.r9.mean.mat.full <- rbind(dn.vals.r9, gamma.vals.r9, rn.vals.r9,
eta.vals.r9, rep(dm.vals.r9, 7),
alpha.vals.r9, rep(r.init.vals.r9, 6),
rep(p.ext.vals.r9, 6), p.mit.vals.r9)
paras.r9.mean.mat.full <- rbind(dn.vals.r9, gamma.vals.r9, rn.vals.r9,
eta.vals.r9, rep(dm.vals.r9, 7),
alpha.vals.r9, rep(r.init.vals.r9, 7),
rep(p.ext.vals.r9, 7), p.mit.vals.r9)
View(paras.r9.mean.mat.full)
rownames(paras.r9.mean.mat.full) <- c("dn.vals.r9", "gamma.vals.r9", "rn.vals.r9",
"eta.vals.r9", "dm.vals.r9", "alpha.vals.r9",
"r.init.vals.r9", "p.ext.vals.r9", "p.mit.vals.r9")
View(paras.r9.mean.mat.full)
paras.r9.mean.mat.full <- rbind(dn.vals.r9, gamma.vals.r9, rn.vals.r9,
eta.vals.r9, c(rep(dm.vals.r9, 5),rep(NA, 2)),
alpha.vals.r9, c(rep(r.init.vals.r9, 5),rep(NA, 2)),
c(rep(p.ext.vals.r9, 5), rep(NA, 2)), p.mit.vals.r9)
View(paras.r9.mean.mat.full)
rownames(paras.r9.mean.mat.full) <- c("dn.vals.r9", "gamma.vals.r9", "rn.vals.r9",
"eta.vals.r9", "dm.vals.r9", "alpha.vals.r9",
"r.init.vals.r9", "p.ext.vals.r9", "p.mit.vals.r9")
setwd("D:/Academia/SCC cells simulation/Time dependent simulations/Simulations run 3")
colnames(paras.r9.mean.mat.full) <- c("init.par", "p1", "p2", "p3", "p4",
"p5", "quad.coef", "lin.coef")
colnames(paras.r9.mean.mat.full) <- c("init.par", "p2", "p3", "p4",
"p5", "quad.coef", "lin.coef")
View(paras.r9.mean.mat.full)
write.table(paras.r9.mean.mat.full, "Round 9 full parameter estimates run 3.txt")
plot(x = c(1,2,3,4,5), y = paras.r9.mean.mat.full[1,])
plot(x = c(1,2,3,4,5), y = paras.r9.mean.mat.full[1,1:5])
plot(x = c(1,2,3,4,5), y = paras.r9.mean.mat.full[2,1:5])
plot(x = c(1,2,3,4,5), y = paras.r9.mean.mat.full[3,1:5])
plot(x = c(1,2,3,4,5), y = paras.r9.mean.mat.full[4,1:5])
plot(x = c(1,2,3,4,5), y = paras.r9.mean.mat.full[6,1:5])
plot(x = c(1,2,3,4,5), y = paras.r9.mean.mat.full[8,1:5])
plot(x = c(1,2,3,4,5), y = paras.r9.mean.mat.full[9,1:5])
lm(dn.vals.r9 ~ x + x^2)
x <- c(1,2,3,4,5)
lm(dn.vals.r9 ~ x + x^2)
lm(dn.vals.r9[1:5] ~ x + x^2)
kkk <- lm(dn.vals.r9[1:5] ~ x + x^2)
summary(kkk)
View(paras.r9.mean.mat.full)
x <- c(1,2,3,4,5)
x2 <- x^2
kkk <- lm(dn.vals.r9[1:5] ~ x + x2)
summary(kkk)
`Day 3 parameter estimates` <- readRDS("D:/Academia/SCC cells simulation/Time dependent simulations/Time dependent models/Day 3 parameter estimates.rds")
View(`Day 3 parameter estimates`)
`dm constant regression model` <- readRDS("D:/Academia/SCC cells simulation/Time dependent simulations/Time dependent models/dm constant regression model.rds")
View(`dm constant regression model`)
# Save the regression models fitted to the final parameter estimates in .rds files
x <- c(1,2,3,4,5)
x2 <- x^2
dn.quad.mod <- lm(dn.vals.r9[1:5] ~ x + x2)
summary(dn.quad.mod)
period.cont <- seq(0, 6, seq = 0.01)
period.cont <- seq(0, 6, by = 0.01)
periods.cont <- seq(0, 6, by = 0.01)
dn.quad.mod <- lm(dn.vals.r9[1:5] ~ x + x2)
fitted.vals.predict.dn.quad <- rep(0, length = length(periods.cont))
for (i in 1:length(periods.cont)) {
fitted.vals.predict.dn.quad[i] <- predict(dn.quad.mod,
newdata = data.frame(periods = periods.cont[i],
periods.2 = periods.cont[i]^2))
}
warnings()
fitted.vals.predict.dn.quad
# Save the regression models fitted to the final parameter estimates of
# time-dependent parameters in .rds files
x <- c(1,2,3,4,5)
x2 <- x^2
periods.cont <- seq(0, 6, by = 0.01)
dn.quad.mod <- lm(dn.vals.r9[1:5] ~ x + x2)
fitted.vals.predict.dn.quad <- rep(0, length = length(periods.cont))
for (i in 1:length(periods.cont)) {
fitted.vals.predict.dn.quad[i] <- predict(dn.quad.mod,
newdata = data.frame(x = periods.cont[i],
x2 = periods.cont[i]^2))
}
# gamma
gamma.quad.mod <- lm(gamma.vals.r9[1:5] ~ x + x2)
summary(gamma.quad.mod)
fitted.vals.predict.gamma.quad <- rep(0, length = length(periods.cont))
for (i in 1:length(periods.cont)) {
fitted.vals.predict.gamma.quad[i] <- predict(gamma.quad.mod,
newdata = data.frame(x = periods.cont[i],
x2 = periods.cont[i]^2))
}
# rn
rn.quad.mod <- lm(rn.vals.r9[1:5] ~ x + x2)
fitted.vals.predict.rn.quad <- rep(0, length = length(periods.cont))
for (i in 1:length(periods.cont)) {
fitted.vals.predict.rn.quad[i] <- predict(rn.quad.mod,
newdata = data.frame(x = periods.cont[i],
x2 = periods.cont[i]^2))
}
summary(rn.quad.mod)
for (i in 1:length(periods.cont)) {
fitted.vals.predict.eta.quad[i] <- predict(eta.quad.mod,
newdata = data.frame(x = periods.cont[i],
x2 = periods.cont[i]^2))
}
# eta
eta.quad.mod <- lm(eta.vals.r9[1:5] ~ x + x2)
fitted.vals.predict.eta.quad <- rep(0, length = length(periods.cont))
for (i in 1:length(periods.cont)) {
fitted.vals.predict.eta.quad[i] <- predict(eta.quad.mod,
newdata = data.frame(x = periods.cont[i],
x2 = periods.cont[i]^2))
}
summary(eta.quad.mod)
# alpha
alpha.quad.mod <- lm(alpha.vals.r9[1:5] ~ x + x2)
fitted.vals.predict.alpha.quad <- rep(0, length = length(periods.cont))
for (i in 1:length(periods.cont)) {
fitted.vals.predict.alpha.quad[i] <- predict(alpha.quad.mod,
newdata = data.frame(x = periods.cont[i],
x2 = periods.cont[i]^2))
}
summary(alpha.quad.mod)
# p.mit
p.mit.quad.mod <- lm(p.mit.vals.r9[1:5] ~ x + x2)
fitted.vals.predict.p.mit.quad <- rep(0, length = length(periods.cont))
for (i in 1:length(periods.cont)) {
fitted.vals.predict.p.mit.quad[i] <- predict(p.mit.quad.mod,
newdata = data.frame(x = periods.cont[i],
x2 = periods.cont[i]^2))
}
# Combine these fitted values into a matrix.
reg.est.vals <- cbind(fitted.vals.predict.dn.quad,
fitted.vals.predict.gamma.quad,
fitted.vals.predict.rn.quad,
fitted.vals.predict.eta.quad,
rep(dm.vals.r9, length(periods.cont)),
fitted.vals.predict.alpha.quad,
rep(r.init.vals.r9, length(periods.cont)),
rep(p.ext.vals.r9, length(periods.cont)),
fitted.vals.predict.p.mit.quad)
View(reg.est.vals)
write.table(reg.est.vals, "Estimated final parameter values regression.txt")
write.table(paras.r9.mean.mat.full, "Round 9 final full parameter estimates run 3.txt")
summary(gamma.quad)
summary(gamma.quad.mod)
gamma.quad.mod$fitted.values
fitted.vals.predict.gamma.quad
View(paras.r9.mean.mat.full)
kkk <- as.matrix(read.table("Round 9 final full parameter estimates run 3.txt", sep = "", header = TRUE))
View(kkk)
View(paras.mean.mat.full)
