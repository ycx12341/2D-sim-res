counter <- counter + 10
current.page <- counter/10
return(paste0("You are at page", current.page, "now!")
}
}
}
counter <- 10
page.selection <- function(call.page) {
current.page <- counter/10
if (current.page == 1){
if (call.page == "previous") {
return("You have already reached page 1!")
} else if (call.page == "next") {
counter <- counter + 10
current.page <- counter/10
return(paste0("You are at page", current.page, "now!"))
}
}
}
page.selection(call.page = "next")
counter <- 10
page.selection <- function(call.page) {
current.page <- counter/10
if (current.page == 1){
if (call.page == "previous") {
return("You have already reached page 1!")
} else if (call.page == "next") {
counter <- counter + 10
current.page <- counter/10
return(paste0("You are at page ", current.page, "now!"))
}
}
}
page.selection(call.page = "next")
counter <- 10
page.selection <- function(call.page) {
current.page <- counter/10
if (current.page == 1){
if (call.page == "previous") {
return("You have already reached page 1!")
} else if (call.page == "next") {
counter <- counter + 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
}
}
}
page.selection(call.page = "next")
page.selection(call.page = "next")
page.selection <- function(current.page, call.page) {
if (1 <= current.page <= 17) {
counter <- counter * 10
if (current.page == 1) {
if (call.page == "previous") {
return("You have already reached page 1!")
} else if (call.page == "next") {
counter <- counter + 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
}
} else if (current.page == 17) {
if (call.page == "previous") {
counter <- counter - 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
counter <- counter + 2
current.page <- 18
return(paste0("You are at page ", current.page, " now!"))
}
} else {
if (call.page == "previous") {
counter <- counter - 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
counter <- counter + 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
}
}
}
if (current.page == 18) {
counter <- 172
if (call.page == "previous") {
counter <- counter - 2
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
return(paste0("You have reached the last page!"))
}
}
}
page.selection <- function(current.page, call.page) {
if (1 <= current.page && current.page <= 17) {
counter <- counter * 10
if (current.page == 1) {
if (call.page == "previous") {
return("You have already reached page 1!")
} else if (call.page == "next") {
counter <- counter + 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
}
} else if (current.page == 17) {
if (call.page == "previous") {
counter <- counter - 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
counter <- counter + 2
current.page <- 18
return(paste0("You are at page ", current.page, " now!"))
}
} else {
if (call.page == "previous") {
counter <- counter - 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
counter <- counter + 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
}
}
}
if (current.page == 18) {
counter <- 172
if (call.page == "previous") {
counter <- counter - 2
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
return(paste0("You have reached the last page!"))
}
}
}
page.selection(current.page = 1, call.page = "next")
page.selection <- function(current.page, call.page) {
if (1 <= current.page && current.page <= 17) {
counter <- current.page * 10
if (current.page == 1) {
if (call.page == "previous") {
return("You have already reached page 1!")
} else if (call.page == "next") {
counter <- counter + 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
}
} else if (current.page == 17) {
if (call.page == "previous") {
counter <- counter - 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
counter <- counter + 2
current.page <- 18
return(paste0("You are at page ", current.page, " now!"))
}
} else {
if (call.page == "previous") {
counter <- counter - 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
counter <- counter + 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
}
}
}
if (current.page == 18) {
counter <- 172
if (call.page == "previous") {
counter <- counter - 2
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
return(paste0("You have reached the last page!"))
}
}
}
page.selection(current.page = 1, call.page = "next")
page.selection(current.page = 1, call.page = "previous")
page.selection(current.page = 2, call.page = "previous")
page.selection(current.page = 2, call.page = "next")
page.selection(current.page = 18, call.page = "previous")
page.selection(current.page = 18, call.page = "next")
page.selection(current.page = 15, call.page = "next")
page.selection(current.page = 14, call.page = "next")
page.selection(current.page = 14, call.page = "previous")
pnorm(10400, 10250, sqrt(11250))
pnorm(10400/50, 10250/50, sqrt(11250)/50)
sqrt(11250)/50
10400/50
10250/50
pnorm(10400/50, 10250/50, sqrt(11250)/sqrt(50))
sqrt(11250)
pnorm(10400, 10250, 11250)
pnorm(80.8, 80, 12)
pnorm(50500, 50000, 90000)
pnorm(50500, 50000, sqrt(90000))
rm(list = ls())
n.sims <- 10000
set.seed(874513)
dn <- runif(n.sims, 0.000069, 0.02)
gamma <- runif(n.sims, 0.005, 0.26)
rn <- runif(n.sims,3.5,9)
eta <- runif(n.sims, 7,18)
dm <- runif(n.sims,0.0001,0.033)
alpha <- runif(n.sims,0.07,0.18)
init.cells.cols <- sample(c(1,2,3,4,5), n.sims, replace = TRUE)
prob.death <- runif(n.sims, 0.01, 0.1)
prob.prof <- runif(n.sims, 0.2, 1)
paras.table <- cbind(dn, gamma, rn, eta, dm, alpha, init.cells.cols,
prob.death, prob.prof)
((7 * 20.276) + (9 * 14.812))/16
(19.11 - 13.61) / (sqrt(17.2025) * sqrt(0.125 + 0.1))
pt(2.796, 16)
2*(1 - pt(2.796, 16))
qf(0.025, 7, 9)
qf(0.975, 7, 9)
14.812/20.276
qf(0.025, 9, 7)
qf(0.975, 9, 7)
((8 * (420^2)) + (15 * (390^2)))/23
(1309 - 1205) / (sqrt(160552.2) * sqrt((1/9) + (1/16)))
(420/390)^2
9 + 25 + 1 + 16 + 9 + 49 + 1
16 * 16 /8
-2 / sqrt(78/7/8)
((4 * 0.96^2) + (4 * 1.08^2))/8
(45.2 - 43.9)/sqrt(1.044 * (2/5))
2*(1-pt(2.012,8))
sl <- c(48.3, 47.6, 49.2, 50.3, 48.8, 51.1, 49.0, 48.1)
ha <- c(50.4, 47.3, 50.8, 52.3, 47.7, 54.5, 48.9, 49.9)
mean(sl-ha)
diff <- sl - ha
sum(diff ^ 2)
1/7 * (sum(diff^2) - 8 * (mean(diff) ^ 2))
8 * (mean(diff) ^ 2)
-1.175/sqrt(2.291/8)
mean(c(25, 33, 43, 45))
mean(c(15, 16, 16, 17, 20, 23, 28, 28, 35, 35))
32/1001
mean(c(13, 14, 10, 13))
mean(c(19, 17, 18, 13, 20, 15))
factorial(10)/(factorial(4) * factorial(6))
sample(c(0,1,2,3), size = 8, replace = TRUE)
set.seed(123)
sample(c(0,1,2,3),size = 8, replace = TRUE)
set.seed(123)
RNGkind(sample.kind = "Rejection")
sample(c(0,1,2,3),size = 8, replace = TRUE)
set.seed(123)
RNGkind(sample.kind = "Rejection")
sample(c(0,1,2,3),size = 8, replace = TRUE)
set.seed(123)
sample(c(0,1,2,3),size = 8, replace = TRUE)
rm(list = ls())
set.seed(123)
sample(c(0,1,2,3),size = 8, replace = TRUE)
?RNGkind
RNGkind(sample.kind = "default")
set.seed(123)
sample(c(0,1,2,3),size = 8, replace = TRUE)
sample(c(0,1,2,3),size = 8, replace = TRUE)
set.seed(123)
sample(c(0,1,2,3),size = 8, replace = TRUE)
set.seed(123)
sample(c(0,1,2,3),size = 8, replace = TRUE)
set.seed(345)
sample(c(0,1,2,3),size = 8, replace = TRUE)
set.seed(345)
RNGkind(sample.kind = "Rejection")
sample(c(0,1,2,3),size = 8, replace = TRUE)
set.seed(345)
sample(c(0,1,2,3),size = 8, replace = TRUE)
set.seed(345)
RNGkind(sample.kind = "Rejection")
sample(c(0,1,2,3),size = 8, replace = TRUE)
set.seed(345)
sample(c(0,1,2,3),size = 8, replace = TRUE)
set.seed(345)
RNGkind(sample.kind = "Rejection")
sample(c(0,1,2,3),size = 8, replace = TRUE)
set.seed(345)
RNGkind(sample.kind = "NULL")
RNGkind(sample.kind = NULL)
RNGkind(sample.kind = "NULL")
RNGkind(sample.kind = NULL)
sample(c(0,1,2,3),size = 8, replace = TRUE)
rm(list = ls())
set.seed(345)
sample(c(0,1,2,3), size = 9, replace = TRUE)
set.seed(345)
RNGkind(sample.kind = "Rejection")
sample(c(0,1,2,3), size = 9, replace = TRUE)
set.seed(345)
sample(c(0,1,2,3), size = 9, replace = TRUE)
sample.int(5, 6, replace = TRUE)
set.seed(345)
sample.int(5, 6, replace = TRUE)
set.seed(345)
RNGkind(sample.kind = "Rejection")
sample.int(5, 6, replace = TRUE)
set.seed(123)
sample.int(5,9,replace = TRUE)
set.seed(123)
RNGkind(sample.kind = "Rejection")
sample.int(5,9,replace = TRUE)
set.seed(123)
sample.int(5,9,replace = TRUE)
set.seed(123)
sample.int(5,6,replace = TRUE)
sample.int(5,6,replace = TRUE)
set.seed(123)
sample.int(5,6,replace = TRUE)
set.seed(123)
RNGkind(sample.kind = "Rejection")
sample.int(5,6,replace = TRUE)
set.seed(123)
sample.int(5,6,replace = TRUE)
set.seed(123)
sample.int(5, 9, replace = TRUE)
set.seed(123)
sample.int(5, 9, replace = TRUE)
set.seed(123)
RNGkind(sample.kind = "Rejection")
sample.int(5, 9, replace = TRUE)
rm(list = ls())
set.seed(123)
sample(c(0,1,2,3), replace = TRUE, size = 9)
set.seed(123)
sample(c(0,1,2,3), replace = TRUE, size = 9)
set.seed(123)
RNGkind(sample.kind = "Rejection")
sample(c(0,1,2,3), replace = TRUE, size = 9)
set.seed(123)
sample(c(0,1,2,3), replace = TRUE, size = 12)
set.seed(123)
sample(c(0,1,2,3), replace = TRUE, size = 12)
sample.int(3,5, replace = TRUE)
set.seed(123)
sample.int(3,5, replace = TRUE)
set.seed(123)
RNGkind(sample.kind = "Rejection")
sample.int(3,5, replace = TRUE)
set.seed(123)
sample.int(3, 7, replace = TRUE)
set.seed(123)
RNGkind(sample.kind = "Rejection")
sample.int(3, 7, replace = TRUE)
qt(0.025, 12)
qt(0.975, 12)
-20.9939 + qt(0.975, 12) * 4.3774
-20.9939 - qt(0.975, 12) * 4.3774
9.3295 - qt(0.975, 12) * 1.0127
9.3295 + qt(0.975, 12) * 1.0127
7.8727 + qt(0.975, 12) * 0.8764
7.8727 - qt(0.975, 12) * 0.8764
pf(11.43, 2, 47)
qt(0.975, 12)
0.004/((4*((1/47)^2)))
((1/47)^2)/(4*0.004)
A <- readLines(con <- file("Unicode.txt", encoding = "UCS-2LE"))
setwd("F:/学术/SCC cells simulation/Time dependent simulations/Average results")
# Clear the workspace, load the necessary package and the file which contains
# the source functions.
rm(list = ls())
library(readr)
library(fpc)
# Clear the workspace, load the necessary package and the file which contains
# the source functions.
rm(list = ls())
library(readr)
library(fpc)
source("PDE 2D ABC functions adjusted SCC (time-dependent parameters).R")
# Clear the workspace, load the necessary package and the file which contains
# the source functions.
rm(list = ls())
library(readr)
library(fpc)
source("PDE 2D ABC functions adjusted SCC (time-dependent parameters).R")
# Read in the final simulation output from three different runs.
paras.r7.run1.res <- read_rds("paras r7 average result run 1.rds")
# Read in the final simulation output from three different runs.
paras.r8.run1.res <- read_rds("paras r8 average result run 1.rds")
paras.r10.run2.res <- read_rds("paras r10 average result run 2.rds")
paras.r9.run3.res <- read_rds("paras r9 average result run 3.rds")
# Read in the final parameter estimates from the three different runs,
# combine them into a matrix by row.
paras.r8.run1 <- as.matrix(read.table("Round 8 parameters run 1.txt",
sep = "", header = TRUE))
paras.r10.run2 <- as.matrix(read.table("Round 10 parameters run 2.txt",
sep = "", header = TRUE))
paras.r9.run3 <- as.matrix(read.table("Round 9 parameters run 3.txt",
sep = "", header = TRUE))
paras.r8.run1.mean <- apply(paras.r8.run1, 2, mean)
paras.r10.run2.mean <- apply(paras.r10.run2, 2, mean)
paras.r9.run3.mean <- apply(paras.r9.run3, 2, mean)
paras.ests <- rbind(paras.r8.run1.mean, paras.r10.run2.mean,
paras.r9.run3.mean)
View(paras.ests)
# B-C distance calculations.
run1.den.mat.d3 <- paras.r8.run1.res$den.mat.d3
run2.den.mat.d3 <- paras.r10.run2.res$den.mat.d3
run3.den.mat.d3 <- paras.r9.run3.res$den.mat.d3
run1.den.mat.d6 <- paras.r8.run1.res$den.mat.d6
run2.den.mat.d6 <- paras.r10.run2.res$den.mat.d6
run3.den.mat.d6 <- paras.r9.run3.res$den.mat.d6
run1.den.mat.d9 <- paras.r8.run1.res$den.mat.d9
run2.den.mat.d9 <- paras.r10.run2.res$den.mat.d9
run3.den.mat.d9 <- paras.r9.run3.res$den.mat.d9
run1.den.mat.d12 <- paras.r8.run1.res$den.mat.d12
run2.den.mat.d12 <- paras.r10.run2.res$den.mat.d12
run3.den.mat.d12 <- paras.r9.run3.res$den.mat.d12
run1.den.mat.d14 <- paras.r8.run1.res$den.mat.d14
run2.den.mat.d14 <- paras.r10.run2.res$den.mat.d14
run3.den.mat.d14 <- paras.r9.run3.res$den.mat.d14
# Vector of reference means
ref.mean <- c(mean(t3.ref.den), mean(t6.ref.den), mean(t9.ref.den),
mean(t12.ref.den), mean(t14.ref.den))
# Covariance matrix
ref.data <- data.frame(t3.ref.den = as.numeric(t3.ref.den),
t6.ref.den = as.numeric(t6.ref.den),
t9.ref.den = as.numeric(t9.ref.den),
t12.ref.den = as.numeric(t12.ref.den),
t14.ref.den = as.numeric(t14.ref.den))
View(ref.data)
ref.cov <- cov(ref.data)
View(ref.cov)
### Run 1 ###
run1.mean <- c(mean(run1.den.mat.d3), mean(run1.den.mat.d6),
mean(run1.den.mat.d9), mean(run1.den.mat.d12),
mean(run1.den.mat.d14))
run1.data <- data.frame(run1.den.mat.d3 = as.numeric(run1.den.mat.d3),
run1.den.mat.d6 = as.numeric(run1.den.mat.d6),
run1.den.mat.d9 = as.numeric(run1.den.mat.d9),
run1.den.mat.d12 = as.numeric(run1.den.mat.d12),
run1.den.mat.d14 = as.numeric(run1.den.mat.d14)
)
View(run1.data)
run1.cov <- cov(run1.data)
bcd.run1.ref <- bhattacharyya.dist(mu1 = ref.mean, mu2 = run1.mean,
Sigma1 = ref.cov, Sigma2 = run1.cov)
### Run 2 ###
run2.mean <- c(mean(run2.den.mat.d3), mean(run2.den.mat.d6),
mean(run2.den.mat.d9), mean(run2.den.mat.d12),
mean(run2.den.mat.d14))
run1.data <- data.frame(run2.den.mat.d3 = as.numeric(run2.den.mat.d3),
run2.den.mat.d6 = as.numeric(run2.den.mat.d6),
run2.den.mat.d9 = as.numeric(run2.den.mat.d9),
run2.den.mat.d12 = as.numeric(run2.den.mat.d12),
run2.den.mat.d14 = as.numeric(run2.den.mat.d14)
)
run2.data <- data.frame(run2.den.mat.d3 = as.numeric(run2.den.mat.d3),
run2.den.mat.d6 = as.numeric(run2.den.mat.d6),
run2.den.mat.d9 = as.numeric(run2.den.mat.d9),
run2.den.mat.d12 = as.numeric(run2.den.mat.d12),
run2.den.mat.d14 = as.numeric(run2.den.mat.d14)
)
run2.cov <- cov(run2.data)
bcd.run2.ref <- bhattacharyya.dist(mu1 = ref.mean, mu2 = run2.mean,
Sigma1 = ref.cov, Sigma2 = run2.cov)
### Run 3 ###
run3.mean <- c(mean(run3.den.mat.d3), mean(run3.den.mat.d6),
mean(run3.den.mat.d9), mean(run3.den.mat.d12),
mean(run3.den.mat.d14))
run3.data <- data.frame(run3.den.mat.d3 = as.numeric(run3.den.mat.d3),
run3.den.mat.d6 = as.numeric(run3.den.mat.d6),
run3.den.mat.d9 = as.numeric(run3.den.mat.d9),
run3.den.mat.d12 = as.numeric(run3.den.mat.d12),
run3.den.mat.d14 = as.numeric(run3.den.mat.d14)
)
run3.cov <- cov(run3.data)
bcd.run3.ref <- bhattacharyya.dist(mu1 = ref.mean, mu2 = run3.mean,
Sigma1 = ref.cov, Sigma2 = run3.cov)
write_rds(list(paras.ests.3runs = paras.ests, paras.final.est = paras.r9.run3.mean),
"SCC time varying final parameter estimates non err calib.rds")
# Plots of actual ESS and corresponding bandwidth factors at the end of
# each round.
ess.bw.run1 <- as.matrix(read.table("Run 1 ESS BW.txt", sep = "", header = TRUE))
ess.bw.run2 <- as.matrix(read.table("Run 2 ESS BW.txt", sep = "", header = TRUE))
ess.bw.run3 <- as.matrix(read.table("Run 3 ESS BW.txt", sep = "", header = TRUE))
View(ess.bw.run1)
# Plot of actual ESS at the end of each round. (3 different runs)
plot(x = seq(1,7,by = 1), y = ess.bw.run1[,1], lwd = 2, xlab = "Rounds",
ylab = "Effective Sample Size", xlim = c(1,9), ylim = c(4500,12550),
col = "purple", main = "Actual effective sample size at different rounds")
# Plot of actual ESS at the end of each round. (3 different runs)
plot(x = seq(1,7,by = 1), y = ess.bw.run1[,1], lwd = 2, xlab = "Rounds",
ylab = "Effective Sample Size", xlim = c(1,9), ylim = c(4500,12600),
col = "purple", main = "Actual effective sample size at different rounds")
points(x = seq(1,9,by = 1), y = ess.bw.run2[,1], pch = 2, lwd = 2, col = "red")
points(x = seq(1,8,by = 1), y = ess.bw.run3[,1], pch = 10, lwd = 2, col = "blue")
abline(h = 7500, col = "black", lty = 2, lwd = 2)
View(ess.bw.run1)
View(ess.bw.run2)
View(ess.bw.run3)
# Plot of corresponding bandwidth factors at the end of each round (3
# different runs).
plot(x = seq(1,7,by = 1), y = ess.bw.run1[,2], lwd = 2, xlab = "Rounds",
ylab = "Weight factor", xlim = c(1,9), ylim = c(0.15,12),
col = "purple", main = "Weight factor at different rounds")
points(x = seq(1,9,by = 1), y = ess.bw.run2[,2], pch = 2, lwd = 2, col = "red")
points(x = seq(1,8,by = 1), y = ess.bw.run3[,2], pch = 10, lwd = 2, col = "blue")
View(paras.r8.run1.res)
View(paras.r10.run2.res)
View(paras.r9.run3.res)
12500*0.9
12500*0.9*0.9
