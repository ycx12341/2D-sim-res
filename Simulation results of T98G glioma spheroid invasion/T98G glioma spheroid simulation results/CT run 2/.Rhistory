ub.bw = ub.bw.temp, ess.target = 2250,
step.size = 0.01)
while (info.list.temp$bw.obj == lb.bw.temp || info.list.temp$bw.obj == ub.bw.temp) {
if (info.list.temp$bw.obj == lb.bw.temp) {
lb.bw.temp <- lb.bw.temp - 0.1
ub.bw.temp <- lb.bw.temp + 0.01
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 2250,
step.size = 0.01)
} else if (info.list.temp$bw.obj == ub.bw.temp) {
lb.bw.temp <- ub.bw.temp - 0.01
ub.bw.temp <- ub.bw.temp + 0.1
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 2250,
step.size = 0.01)
}
}
ls.r7.crage[[i]] <- info.list.temp
names(ls.r7.crage)[i] <- paste0("info_list_r7_",ls.r7.pert.sort.min[i])
print(c(i, info.list.temp$bw.obj, info.list$ess.obj))
}
ls.r7.crage <- vector(mode = "list")
for (i in 1:length(ls.r7.diff.mat)) {
diff.mat.temp <- ls.r7.diff.mat[[i]]
lb.bw.temp <- 4.0
ub.bw.temp <- 4.1
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 2250,
step.size = 0.01)
while (info.list.temp$bw.obj == lb.bw.temp || info.list.temp$bw.obj == ub.bw.temp) {
if (info.list.temp$bw.obj == lb.bw.temp) {
lb.bw.temp <- lb.bw.temp - 0.1
ub.bw.temp <- lb.bw.temp + 0.01
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 2250,
step.size = 0.01)
} else if (info.list.temp$bw.obj == ub.bw.temp) {
lb.bw.temp <- ub.bw.temp - 0.01
ub.bw.temp <- ub.bw.temp + 0.1
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 2250,
step.size = 0.01)
}
}
ls.r7.crage[[i]] <- info.list.temp
names(ls.r7.crage)[i] <- paste0("info_list_r7_",ls.r7.pert.sort.min[i])
print(c(i, info.list.temp$bw.obj, info.list.temp$ess.obj))
}
View(ls.r7.crage)
# Save the results into a .rds file
write_rds(ls.r7.crage, "Coverage_test_disp_wt_prob_r7_d1_d3_pert_sep_non_zero.rds")
# Probabilities and check if they fit uniform distributions
paras.r7 <- cbind(seq(1,10000,by = 1), paras.r7)
# An empty matrix used to store all the coverage probabilities
# regarding each perturbed dataset.
cov.mat <- matrix(0, nrow = 200, ncol = (length(paras.r7[1,]) - 1))
# Coverage probabilities
for (i in 1:200) {
# Read in the information matrix regarding each perturbed dataset
info.mat.temp <- ls.r7.crage[[i]]$info.mat
# Remove the parameter set which generated the perturbed dataset,
# in order to keep the indices consistent
paras.r7.corres <- paras.r6[-ls.r7.pert.sort.min[i],]
# For each parameter, calculate its coverage probability
prob.vec <- vector()
for (j in 1:(length(paras.r6[1,]) - 1)) {
cov.ind.temp <- which(paras.r7.corres[, (j + 1)] <= paras.r7[ls.r7.pert.sort.min[i], (j + 1)])
prob.temp <- sum(info.mat.temp[cov.ind.temp, length(info.mat.temp[1,])])/sum(info.mat.temp[,length(info.mat.temp[1,])])
# prob.temp <- length(cov.ind.temp)/length(info.mat.temp[,8])
# prob.temp <- (1 + length(cov.ind.temp))/(2 + length(info.mat.temp[,8]))
prob.vec <- c(prob.vec, prob.temp)
}
# Store the coverage probability corresponding to each perturbed dataset into
# each row of the coverage probability matrix.
cov.mat[i, ] <- prob.vec
}
# An empty matrix used to store all the coverage probabilities
# regarding each perturbed dataset.
cov.mat <- matrix(0, nrow = 200, ncol = (length(paras.r7[1,]) - 1))
# Coverage probabilities
for (i in 1:200) {
# Read in the information matrix regarding each perturbed dataset
info.mat.temp <- ls.r7.crage[[i]]$info.mat
# Remove the parameter set which generated the perturbed dataset,
# in order to keep the indices consistent
paras.r7.corres <- paras.r7[-ls.r7.pert.sort.min[i],]
# For each parameter, calculate its coverage probability
prob.vec <- vector()
for (j in 1:(length(paras.r6[1,]) - 1)) {
cov.ind.temp <- which(paras.r7.corres[, (j + 1)] <= paras.r7[ls.r7.pert.sort.min[i], (j + 1)])
prob.temp <- sum(info.mat.temp[cov.ind.temp, length(info.mat.temp[1,])])/sum(info.mat.temp[,length(info.mat.temp[1,])])
# prob.temp <- length(cov.ind.temp)/length(info.mat.temp[,8])
# prob.temp <- (1 + length(cov.ind.temp))/(2 + length(info.mat.temp[,8]))
prob.vec <- c(prob.vec, prob.temp)
}
# Store the coverage probability corresponding to each perturbed dataset into
# each row of the coverage probability matrix.
cov.mat[i, ] <- prob.vec
}
# An empty matrix used to store all the coverage probabilities
# regarding each perturbed dataset.
cov.mat <- matrix(0, nrow = 200, ncol = (length(paras.r7[1,]) - 1))
# Coverage probabilities
for (i in 1:200) {
# Read in the information matrix regarding each perturbed dataset
info.mat.temp <- ls.r7.crage[[i]]$info.mat
# Remove the parameter set which generated the perturbed dataset,
# in order to keep the indices consistent
paras.r7.corres <- paras.r7[-ls.r7.pert.sort.min[i],]
# For each parameter, calculate its coverage probability
prob.vec <- vector()
for (j in 1:(length(paras.r7[1,]) - 1)) {
cov.ind.temp <- which(paras.r7.corres[, (j + 1)] <= paras.r7[ls.r7.pert.sort.min[i], (j + 1)])
prob.temp <- sum(info.mat.temp[cov.ind.temp, length(info.mat.temp[1,])])/sum(info.mat.temp[,length(info.mat.temp[1,])])
# prob.temp <- length(cov.ind.temp)/length(info.mat.temp[,8])
# prob.temp <- (1 + length(cov.ind.temp))/(2 + length(info.mat.temp[,8]))
prob.vec <- c(prob.vec, prob.temp)
}
# Store the coverage probability corresponding to each perturbed dataset into
# each row of the coverage probability matrix.
cov.mat[i, ] <- prob.vec
}
# Store the coverage probabilities
write.table(cov.mat, "Coverage probabilities glioma r3 d1 d3 perturbed separately non zero only.txt")
# Histograms
set.seed(874512)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of rn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of R_{init.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,3], main = "Coverage check of R_{init.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of P_{ext.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of P_{mit.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,5], unif.sample)
paras.r7.output.pert <- vector(mode = "list")
set.seed(874512)
RNGkind(sample.kind = "Rejection")
for (i in 1:length(paras.r7.output)) {
ls.temp <- paras.r7.output[[i]]
# Read the unperturbed data
den.mat.d1.temp.unpert <- ls.temp$den.mat.d1
den.mat.d3.temp.unpert <- ls.temp$den.mat.d3
# Create empty matrices to store perturbed data
den.mat.d1.temp.pert <- matrix(0, nrow = nrow(den.mat.d1.temp.unpert),
ncol = ncol(den.mat.d1.temp.unpert))
den.mat.d3.temp.pert <- matrix(0, nrow = nrow(den.mat.d3.temp.unpert),
ncol = ncol(den.mat.d3.temp.unpert))
# Add perturbation (to non-zero data only)
for (j in 1:length(den.mat.d1.temp.unpert)) {
#if(den.mat.d1.temp.unpert[j] != 0) {
den.mat.d1.temp.pert[j] <- rnorm(1, den.mat.d1.temp.unpert[j], sd = sd.r7.d1.min)
while (den.mat.d1.temp.pert[j] < 0 || den.mat.d1.temp.pert[j] > 1) {
den.mat.d1.temp.pert[j] <- rnorm(1, den.mat.d1.temp.unpert[j], sd = sd.r7.d1.min)
}
#}
#if (den.mat.d3.temp.unpert[j] != 0) {
den.mat.d3.temp.pert[j] <- rnorm(1, den.mat.d3.temp.unpert[j], sd = sd.r7.d3.min)
while (den.mat.d3.temp.pert[j] < 0 || den.mat.d3.temp.pert[j] > 1) {
den.mat.d3.temp.pert[j] <- rnorm(1, den.mat.d3.temp.unpert[j], sd = sd.r7.d3.min)
}
#}
}
# Sum of squared differences between the perturbed densities and the observed densities
sse.d1.temp <- sum((ref.den$t1.ref.den - den.mat.d1.temp.pert)^2)
sse.d3.temp <- sum((ref.den$t3.ref.den - den.mat.d3.temp.pert)^2)
diff.temp.pert <- sum(sse.d1.temp, sse.d3.temp)
# Store each set of perturbed data into the list
paras.r7.output.pert[[i]] <- list(den.mat.d1.pert = den.mat.d1.temp.pert,
den.mat.d3.pert = den.mat.d3.temp.pert,
diff = diff.temp.pert)
# Name the elements in the list with correct indices
names(paras.r7.output.pert)[i] <- paste0("ls_r7_",i,"_pert")
print(i)
}
# Sort the sum of squared differences
ls.r7.pert <- matrix(0, nrow = length(ls.r7[,2])
,ncol = 2)
for (i in 1:length(ls.r7[,2])) {
ls.r7.pert[i,] <- c(i, as.double(paras.r7.output.pert[[i]]$diff))
}
ls.r7.pert.sort <- order(ls.r7.pert[,2])
ls.r7.pert.sort.min <- ls.r7.pert.sort[1:200]
View(ls.r7.pert)
# Extract out the corresponding 200 perturbed model outputs that have the
# minimum discrepancy with the reference data.
paras.r7.output.pert.full <- paras.r7.output.pert
paras.r7.output.pert <- paras.r7.output.pert[ls.r7.pert.sort.min]
View(paras.r7.output.pert)
ls.r7.diff.mat <- vector(mode = "list")
for (i in 1:length(paras.r7.output.pert)) {
# For each perturbed dataset, record its discrepancy with other unperturbed
# model output, corresponding weights and resampling probabilities.
diff.mat <- matrix(0, nrow = length(paras.r7[,2]), ncol = 2)
paras.r7.output.pert.temp <- paras.r7.output.pert[[i]]
for (j in 1:length(paras.r7[,2])) {
# Read in the unperturbed model output.
res.temp <- paras.r7.output[[j]]
# Calculate the sum of squared differences between the unperturbed model output and the
# selected set of perturbed data.
sse.d1.temp <- sum((res.temp$den.mat.d1 - paras.r7.output.pert.temp$den.mat.d1.pert)^2)
sse.d3.temp <- sum((res.temp$den.mat.d3 - paras.r7.output.pert.temp$den.mat.d3.pert)^2)
diff.temp <- sum(sse.d1.temp, sse.d3.temp)
# Append index, discrepancy and weights into the first three elements of each row
# of the matrix
diff.mat[j, 1:2] <- c(j, diff.temp)
# print(j)
}
# Remove the parameter set that corresponds to the current perturbed model output
diff.mat <- diff.mat[-ls.r7.pert.sort.min[i],]
# Store the info matrix in the list and name it with the corresponding index
ls.r7.diff.mat[[i]] <- diff.mat
names(ls.r7.diff.mat)[i] <- paste0("diff_mat_r7_",ls.r7.pert.sort.min[i])
# Progress tracking
print(i)
}
View(ls.r7.diff.mat)
ls.r7.diff.mat[["diff_mat_r7_7822"]]
ls.r7.crage <- vector(mode = "list")
for (i in 1:length(ls.r7.diff.mat)) {
diff.mat.temp <- ls.r7.diff.mat[[i]]
lb.bw.temp <- 4.0
ub.bw.temp <- 4.1
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 2250,
step.size = 0.01)
while (info.list.temp$bw.obj == lb.bw.temp || info.list.temp$bw.obj == ub.bw.temp) {
if (info.list.temp$bw.obj == lb.bw.temp) {
lb.bw.temp <- lb.bw.temp - 0.1
ub.bw.temp <- lb.bw.temp + 0.01
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 2250,
step.size = 0.01)
} else if (info.list.temp$bw.obj == ub.bw.temp) {
lb.bw.temp <- ub.bw.temp - 0.01
ub.bw.temp <- ub.bw.temp + 0.1
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 2250,
step.size = 0.01)
}
}
ls.r7.crage[[i]] <- info.list.temp
names(ls.r7.crage)[i] <- paste0("info_list_r7_",ls.r7.pert.sort.min[i])
print(c(i, info.list.temp$bw.obj, info.list.temp$ess.obj))
}
kkk <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = 4.0, ub.bw = 4.1, ess.target = 2250, step.size = 0.01)
View(kkk)
kkk <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = 7.0, ub.bw = 7.1, ess.target = 2250, step.size = 0.01)
View(kkk)
kkk <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = 12.0, ub.bw = 12.1, ess.target = 2250, step.size = 0.01)
View(kkk)
kkk <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = 11.9, ub.bw = 12.1, ess.target = 2250, step.size = 0.01)
View(kkk)
ls.r7.crage <- vector(mode = "list")
for (i in 1:length(ls.r7.diff.mat)) {
diff.mat.temp <- ls.r7.diff.mat[[i]]
lb.bw.temp <- 11.9 #4.0
ub.bw.temp <- 12.0 #4.1
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 2250,
step.size = 0.01)
while (info.list.temp$bw.obj == lb.bw.temp || info.list.temp$bw.obj == ub.bw.temp) {
if (info.list.temp$bw.obj == lb.bw.temp) {
lb.bw.temp <- lb.bw.temp - 0.1
ub.bw.temp <- lb.bw.temp + 0.01
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 2250,
step.size = 0.01)
} else if (info.list.temp$bw.obj == ub.bw.temp) {
lb.bw.temp <- ub.bw.temp - 0.01
ub.bw.temp <- ub.bw.temp + 0.1
info.list.temp <- calculate.bw(ss.mat = diff.mat.temp, lb.bw = lb.bw.temp,
ub.bw = ub.bw.temp, ess.target = 2250,
step.size = 0.01)
}
}
ls.r7.crage[[i]] <- info.list.temp
names(ls.r7.crage)[i] <- paste0("info_list_r7_",ls.r7.pert.sort.min[i])
print(c(i, info.list.temp$bw.obj, info.list.temp$ess.obj))
}
View(paras.r7.output.pert)
write_rds(ls.r7.crage, "Coverage_test_disp_wt_prob_r6_d1_d3_pert_sep.rds")
View(paras.r7)
# An empty matrix used to store all the coverage probabilities
# regarding each perturbed dataset.
cov.mat <- matrix(0, nrow = 200, ncol = (length(paras.r7[1,]) - 1))
# Coverage probabilities
for (i in 1:200) {
# Read in the information matrix regarding each perturbed dataset
info.mat.temp <- ls.r7.crage[[i]]$info.mat
# Remove the parameter set which generated the perturbed dataset,
# in order to keep the indices consistent
paras.r7.corres <- paras.r7[-ls.r7.pert.sort.min[i],]
# For each parameter, calculate its coverage probability
prob.vec <- vector()
for (j in 1:(length(paras.r7[1,]) - 1)) {
cov.ind.temp <- which(paras.r7.corres[, (j + 1)] <= paras.r7[ls.r7.pert.sort.min[i], (j + 1)])
prob.temp <- sum(info.mat.temp[cov.ind.temp, length(info.mat.temp[1,])])/sum(info.mat.temp[,length(info.mat.temp[1,])])
# prob.temp <- length(cov.ind.temp)/length(info.mat.temp[,8])
# prob.temp <- (1 + length(cov.ind.temp))/(2 + length(info.mat.temp[,8]))
prob.vec <- c(prob.vec, prob.temp)
}
# Store the coverage probability corresponding to each perturbed dataset into
# each row of the coverage probability matrix.
cov.mat[i, ] <- prob.vec
}
write.table(cov.mat, "Coverage probabilities glioma r3 d1 d3 perturbed separately.txt")
# Histograms
set.seed(874512)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of rn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of R_{init.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of P_{ext.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of P_{mit.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,5], unif.sample)
sort(cov.mat[,1])
hist(sort(cov.mat[,1]), main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,1], unif.sample)
ks.test(sort(cov.mat[,1]), unif.sample)
write_rds(ls.r7.crage, "Coverage_test_disp_wt_prob_r7_d1_d3_pert_sep.rds")
# An empty matrix used to store all the coverage probabilities
# regarding each perturbed dataset.
cov.mat <- matrix(0, nrow = 200, ncol = (length(paras.r7[1,]) - 1))
# Coverage probabilities
for (i in 1:200) {
# Read in the information matrix regarding each perturbed dataset
info.mat.temp <- ls.r7.crage[[i]]$info.mat
# Remove the parameter set which generated the perturbed dataset,
# in order to keep the indices consistent
paras.r7.corres <- paras.r7[-ls.r7.pert.sort.min[i],]
# For each parameter, calculate its coverage probability
prob.vec <- vector()
for (j in 1:(length(paras.r7[1,]) - 1)) {
cov.ind.temp <- which(paras.r7.corres[, (j + 1)] <= paras.r7[ls.r7.pert.sort.min[i], (j + 1)])
prob.temp <- sum(info.mat.temp[cov.ind.temp, length(info.mat.temp[1,])])/sum(info.mat.temp[,length(info.mat.temp[1,])])
# prob.temp <- length(cov.ind.temp)/length(info.mat.temp[,8])
# prob.temp <- (1 + length(cov.ind.temp))/(2 + length(info.mat.temp[,8]))
prob.vec <- c(prob.vec, prob.temp)
}
# Store the coverage probability corresponding to each perturbed dataset into
# each row of the coverage probability matrix.
cov.mat[i, ] <- prob.vec
}
write.table(cov.mat, "Coverage probabilities glioma r7 d1 d3 perturbed separately.txt")
# Histograms
set.seed(874512)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,1], unif.sample)
ls.r7.crage <- read_rds("Coverage_test_disp_wt_prob_r7_d1_d3_pert_sep_non_zero.rds")
# An empty matrix used to store all the coverage probabilities
# regarding each perturbed dataset.
cov.mat <- matrix(0, nrow = 200, ncol = (length(paras.r7[1,]) - 1))
# Coverage probabilities
for (i in 1:200) {
# Read in the information matrix regarding each perturbed dataset
info.mat.temp <- ls.r7.crage[[i]]$info.mat
# Remove the parameter set which generated the perturbed dataset,
# in order to keep the indices consistent
paras.r7.corres <- paras.r7[-ls.r7.pert.sort.min[i],]
# For each parameter, calculate its coverage probability
prob.vec <- vector()
for (j in 1:(length(paras.r7[1,]) - 1)) {
cov.ind.temp <- which(paras.r7.corres[, (j + 1)] <= paras.r7[ls.r7.pert.sort.min[i], (j + 1)])
prob.temp <- sum(info.mat.temp[cov.ind.temp, length(info.mat.temp[1,])])/sum(info.mat.temp[,length(info.mat.temp[1,])])
# prob.temp <- length(cov.ind.temp)/length(info.mat.temp[,8])
# prob.temp <- (1 + length(cov.ind.temp))/(2 + length(info.mat.temp[,8]))
prob.vec <- c(prob.vec, prob.temp)
}
# Store the coverage probability corresponding to each perturbed dataset into
# each row of the coverage probability matrix.
cov.mat[i, ] <- prob.vec
}
# Store the coverage probabilities
write.table(cov.mat, "Coverage probabilities glioma r7 d1 d3 perturbed separately non zero only.txt")
View(cov.mat)
# Histograms
set.seed(874512)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of rn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of R_{init.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of P_{ext.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of P_{mit.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,5], unif.sample)
paras.r7.output.pert <- vector(mode = "list")
set.seed(874512)
RNGkind(sample.kind = "Rejection")
for (i in 1:length(paras.r7.output)) {
ls.temp <- paras.r7.output[[i]]
# Read the unperturbed data
den.mat.d1.temp.unpert <- ls.temp$den.mat.d1
den.mat.d3.temp.unpert <- ls.temp$den.mat.d3
# Create empty matrices to store perturbed data
den.mat.d1.temp.pert <- matrix(0, nrow = nrow(den.mat.d1.temp.unpert),
ncol = ncol(den.mat.d1.temp.unpert))
den.mat.d3.temp.pert <- matrix(0, nrow = nrow(den.mat.d3.temp.unpert),
ncol = ncol(den.mat.d3.temp.unpert))
# Add perturbation (to non-zero data only)
for (j in 1:length(den.mat.d1.temp.unpert)) {
if(den.mat.d1.temp.unpert[j] != 0) {
den.mat.d1.temp.pert[j] <- rnorm(1, den.mat.d1.temp.unpert[j], sd = sd.r7.d1.min)
while (den.mat.d1.temp.pert[j] < 0 || den.mat.d1.temp.pert[j] > 1) {
den.mat.d1.temp.pert[j] <- rnorm(1, den.mat.d1.temp.unpert[j], sd = sd.r7.d1.min)
}
}
if (den.mat.d3.temp.unpert[j] != 0) {
den.mat.d3.temp.pert[j] <- rnorm(1, den.mat.d3.temp.unpert[j], sd = sd.r7.d3.min)
while (den.mat.d3.temp.pert[j] < 0 || den.mat.d3.temp.pert[j] > 1) {
den.mat.d3.temp.pert[j] <- rnorm(1, den.mat.d3.temp.unpert[j], sd = sd.r7.d3.min)
}
}
}
# Sum of squared differences between the perturbed densities and the observed densities
sse.d1.temp <- sum((ref.den$t1.ref.den - den.mat.d1.temp.pert)^2)
sse.d3.temp <- sum((ref.den$t3.ref.den - den.mat.d3.temp.pert)^2)
diff.temp.pert <- sum(sse.d1.temp, sse.d3.temp)
# Store each set of perturbed data into the list
paras.r7.output.pert[[i]] <- list(den.mat.d1.pert = den.mat.d1.temp.pert,
den.mat.d3.pert = den.mat.d3.temp.pert,
diff = diff.temp.pert)
# Name the elements in the list with correct indices
names(paras.r7.output.pert)[i] <- paste0("ls_r7_",i,"_pert")
print(i)
}
# Sort the sum of squared differences
ls.r7.pert <- matrix(0, nrow = length(ls.r7[,2])
,ncol = 2)
for (i in 1:length(ls.r7[,2])) {
ls.r7.pert[i,] <- c(i, as.double(paras.r7.output.pert[[i]]$diff))
}
ls.r7.pert.sort <- order(ls.r7.pert[,2])
ls.r7.pert.sort.min <- ls.r7.pert.sort[1:200]
View(ls.r7.crage)
# An empty matrix used to store all the coverage probabilities
# regarding each perturbed dataset.
cov.mat <- matrix(0, nrow = 200, ncol = (length(paras.r7[1,]) - 1))
# Coverage probabilities
for (i in 1:200) {
# Read in the information matrix regarding each perturbed dataset
info.mat.temp <- ls.r7.crage[[i]]$info.mat
# Remove the parameter set which generated the perturbed dataset,
# in order to keep the indices consistent
paras.r7.corres <- paras.r7[-ls.r7.pert.sort.min[i],]
# For each parameter, calculate its coverage probability
prob.vec <- vector()
for (j in 1:(length(paras.r7[1,]) - 1)) {
cov.ind.temp <- which(paras.r7.corres[, (j + 1)] <= paras.r7[ls.r7.pert.sort.min[i], (j + 1)])
prob.temp <- sum(info.mat.temp[cov.ind.temp, length(info.mat.temp[1,])])/sum(info.mat.temp[,length(info.mat.temp[1,])])
# prob.temp <- length(cov.ind.temp)/length(info.mat.temp[,8])
# prob.temp <- (1 + length(cov.ind.temp))/(2 + length(info.mat.temp[,8]))
prob.vec <- c(prob.vec, prob.temp)
}
# Store the coverage probability corresponding to each perturbed dataset into
# each row of the coverage probability matrix.
cov.mat[i, ] <- prob.vec
}
# Store the coverage probabilities
write.table(cov.mat, "Coverage probabilities glioma r7 d1 d3 perturbed separately non zero only.txt")
# Histograms
set.seed(874512)
unif.sample <- runif(200, 0, 1)
hist(cov.mat[,1], main = "Coverage check of dn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,1], unif.sample)
hist(cov.mat[,2], main = "Coverage check of rn",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,2], unif.sample)
hist(cov.mat[,3], main = "Coverage check of R_{init.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,3], unif.sample)
hist(cov.mat[,4], main = "Coverage check of P_{ext.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,4], unif.sample)
hist(cov.mat[,5], main = "Coverage check of P_{mit.}",
xlim = c(0,1), xlab = "Probabilities")
ks.test(cov.mat[,5], unif.sample)
Coverage_test_disp_wt_prob_r6_d1_d3_pert_sep <- readRDS("~/Academia Yunchen/Glioma simulations/Second set of invasion pattern/40_40 (less fixed static time wider r prior correct chi 5ps)/Coverage test on run 2 final result/Coverage_test_disp_wt_prob_r6_d1_d3_pert_sep.rds")
Coverage_test_disp_wt_prob_r7_d1_d3_pert_sep <- readRDS("~/Academia Yunchen/Glioma simulations/Second set of invasion pattern/40_40 (less fixed static time wider r prior correct chi 5ps)/Coverage test on run 2 final result/Coverage_test_disp_wt_prob_r7_d1_d3_pert_sep.rds")
View(Coverage_test_disp_wt_prob_r6_d1_d3_pert_sep)
View(Coverage_test_disp_wt_prob_r7_d1_d3_pert_sep)
